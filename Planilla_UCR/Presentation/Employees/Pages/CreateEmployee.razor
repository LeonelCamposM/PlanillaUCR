@page "/Create_Employee/{email}/{projectName}"
@using Application.People
@using Domain.People.Entities
@*@using Application.Accounts
@using Domain.Accounts.Entities*@
@*@using Presentation.Accounts.Models*@
@using Domain.Employees.Entities
@using Application.Employees
@using Presentation.Employees.Models
@using Presentation.Core.Components
========
﻿@page "/Register_Form"
@using Domain.People.Entities
@using Domain.Employees.Entities 
@using Domain.Employees.DTOs
@using Application.Accounts
@using Application.People
@using Application.Employees
@using Application.Employers
@using Domain.Accounts.Entities
@using Domain.Accounts.DTOs
@using Presentation.Shared.Models
@using Presentation.Core.Components
@using System.Text.RegularExpressions
>>>>>>>> main:Planilla_UCR/Presentation/Accounts/Pages/RegisterForm.razor
@using System.ComponentModel.DataAnnotations
@using Application.Accounts
@using Domain.Accounts.Entities
@using Presentation.Core.Layout.Visitor

@layout VisitorMainLayout
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IPersonService PersonService
<<<<<<<< HEAD:Planilla_UCR/Presentation/Employees/Pages/CreateEmployee.razor
========
@inject IAccountService AccountService
>>>>>>>> main:Planilla_UCR/Presentation/Accounts/Pages/RegisterForm.razor
@inject IEmployeeService EmployeeService
@inject IEmployerService EmployerService

@*Navigation footprint *@
@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
    };
}
 <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>


<MudGrid>
    <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudSpacer></MudSpacer>
            <MudText Align="Align.Center" Typo="Typo.h6">Información del empleado</MudText>
            <MudForm @ref="form">
                    <MudGrid>
                    @*Small fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Name" Label="Nombre" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Email" Label="Email" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Por favor, digite un correo válido"})"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.LastName1" Label="Primer Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.LastName2" Label="Segundo Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                     <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.PhoneNumber" Label="Teléfono" Variant="Variant.Outlined" ></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudNumericField @bind-Value="personInfo.Ssn" Label="Cedula" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido" HideSpinButtons="true" Min = "0"> </MudNumericField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    @*Large fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.Adress" Label="Dirección" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.BankAccount" Label="Cuenta Bancaria" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    
                        <br />
                        <MudDivider />
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    @*Create buton *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8" >
                    
                        <MudButton Disabled="@snackHandler._saving" OnClick="SavePersonInfo" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (snackHandler._saving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                <MudText>Registrar</MudText>
                            }
                        </MudButton>
                        <MudButton Disabled="true"> </MudButton>

<<<<<<<< HEAD:Planilla_UCR/Presentation/Employees/Pages/CreateEmployee.razor
                        @*Clear buton *@
                        <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Tertiary">
========
                        @*Clear buton *@
                        <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
>>>>>>>> main:Planilla_UCR/Presentation/Accounts/Pages/RegisterForm.razor
                                <MudText>Limpiar</MudText>
                        </MudButton>
                        
                    </MudItem>
                    <MudItem xs="2"></MudItem>
                    
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    Person personInfo = new Person("", "", "", "", Int32.Parse("0"), "", "", "");
<<<<<<<< HEAD:Planilla_UCR/Presentation/Employees/Pages/CreateEmployee.razor
    //Account accountInfo = new Account("","");
    SnackHandler snackHandler = new SnackHandler();
    MudForm form;
========
    AccountsDTO accountData = new AccountsDTO("","");
    MudTextField<string> pwField1;
    SnackHandler snackHandler = new SnackHandler();
    MudForm form;
    String Rol;
    public bool SendEmail { get; set; } = false;


    async Task SavePersonInfo()
    {
        snackHandler._saving = true;
        await form.Validate();
<<<<<<<< HEAD:Planilla_UCR/Presentation/Employees/Pages/CreateEmployee.razor
        bool validPerson = await validatePersonInfo(personInfo);
        if (form.IsValid && validPerson)
        {
            await PersonService.CreatePersonAsync(personInfo);
            //accountInfo.Email = personInfo.Email;
            //accountInfo.Password = personInfo.Name +"_"+ personInfo.Ssn.ToString();
            //await AccountService.CreateAccountAsync(accountInfo);
            await EmployeeService.CreateEmployeeAsync(personInfo.Email);
            snackHandler._saving = false;
            ShowSnackNotification("Cuenta para empleado "+personInfo.Name+" creada", Severity.Success);
            ShowSnackNotification("Se utilizó la contraseña por defecto: Nombre_Cedula", Severity.Info);
========
        if (form.IsValid && ValidateInfo(personInfo)){
            await PersonService.CreatePersonAsync(personInfo);
            if (Rol.Equals("RolEmployee")){
                //await EmployeeService.CreateEmployeeAsync(personInfo.Email);
                //accountData.Email = personInfo.Email;
                //await AccountService.InsertAccountData(accountData);
                //snackHandler._saving = false;
                //ShowSnackNotification("Cuenta para "+personInfo.Name+" registrada", Severity.Success);
                //await AccountService.SetAuthenticationState(accountData, 1);
            }
            else{
                await EmployerService.CreateEmployerAsync(personInfo.Email);
                accountData.Email = personInfo.Email;
                IEnumerable<Account> emailChecked = await AccountService.CheckEmail(accountData);
                if (emailChecked.Length() != 0)
                {
                    ShowSnackNotification("El email ya se encuentra en uso", Severity.Error);
                }
                else
                {
                    await AccountService.InsertAccountData(accountData);
                    snackHandler._saving = false;
                    ShowSnackNotification("Cuenta para "+personInfo.Name+" registrada", Severity.Success);
                    await AccountService.SetAuthenticationState(accountData,1);
                    nav.NavigateTo($"/Projects/{accountData.Email}");
        }
            }
            if (SendEmail == true) {
                AccountService.SendEmail("Ha registrado su cuenta correctamente, bienvenido a Planilla_UCR",personInfo.Email);
            } 
>>>>>>>> main:Planilla_UCR/Presentation/Accounts/Pages/RegisterForm.razor
        }
        snackHandler._saving = false;
    }

<<<<<<<< HEAD:Planilla_UCR/Presentation/Employees/Pages/CreateEmployee.razor
    async Task<bool> validatePersonInfo(Person personInfo)
    {
        bool Ssn = ValidateSsn(personInfo);
        bool Email = await ValidateEmail(personInfo);
        return Ssn && Email;
    }

    async Task<bool> ValidateEmail(Person personInfo)
========
    bool ValidateSsn(Person personInfo)
>>>>>>>> main:Planilla_UCR/Presentation/Accounts/Pages/RegisterForm.razor
    {
        bool valid = true;
        {
        }   
        return valid;
    }

    {
        bool valid = true; 
        {
        }
        return valid;
    }

    bool ValidateInfo(Person personInfo)
    {
        bool ssn = ValidateSsn(personInfo);
        bool email = ValidateEmail(personInfo);
        return ssn && email;
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Contraseña es requerida!";
            yield break;
        }
        if (pw.Length < 8)
        {
            yield return "La contraseña debe tener al menos 8 caracteres";
        }
        if (!Regex.IsMatch(pw, @"[A-Z]"))
        {
            yield return "Debe contener al menos una letra mayúscula";
        }
        if (!Regex.IsMatch(pw, @"[a-z]"))
        {
            yield return "Debe contener al menos una letra minúscula";
        }

        if (!Regex.IsMatch(pw, @"[0-9]"))
        {
            yield return "Debe contener al menos un dígito";
        }
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Contraseñas no coinciden";
        return null;
    }

>>>>>>>> main:Planilla_UCR/Presentation/Accounts/Pages/RegisterForm.razor
    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 2;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        personInfo.Name = "";
        personInfo.Email = "";
        personInfo.LastName1 = "";
        personInfo.LastName2 = "";
        personInfo.Adress = "";
        personInfo.BankAccount = "";
        personInfo.PhoneNumber = "";
        personInfo.Ssn = 0;
        //accountInfo.Password = "";
    }
}
