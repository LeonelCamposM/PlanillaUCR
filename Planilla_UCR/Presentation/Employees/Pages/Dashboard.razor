@using Application.Payments
@using Application.ContextMenu
@using Domain.Payments.Entities
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.Subscriptions
@using Domain.People.Entities
@using Domain.Subscriptions.Entities
@using Application.LegalDeductions
@using Domain.LegalDeductions.Entities
@using Application.Subscribes
@using Domain.Subscribes.Entities
@using System.Globalization
@using Presentation.Payments.Models
@using Application.People
@using Application.TaxCalculator
@using Application.PaymentCalculator;
@using Presentation.Employees.Models
@using Presentation.Shared.Models
@inject IPaymentService PaymentService
@inject IContextMenuService ContextMenuService
@inject IAgreementService AgreementService
@inject ILegalDeductionService LegalDeductionService
@inject IPersonService PersonService
@inject ISubscribeService SubscribeService
@inject NavigationManager nav
@inject ISubscriptionService SuscriptionService
@inject ITaxCalculatorService TaxCalculatorService
@inject IPaymentCalculatorService PaymentCalculatorService
@inject IContextMenuService ContextMenuService

@page "/Dashboard/{email}/"

@if(_loading) 
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudText>
       
    </MudPaper>
} else 
{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
       new BreadcrumbItem("Inicio", href: ""),
       new BreadcrumbItem("Proyectos", href: $"/Projects/{email}"),
       new BreadcrumbItem("Dashboard último pago", href: null, disabled: true)
    }; 
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
    </MudPaper>
    if (!_empty)
    {
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center align-center">
                <MudItem xs="4">
                     <MudText Align="Align.Center" Typo="Typo.h6" GutterBottom="true">Salario</MudText>
                </MudItem>
             </MudItem>
        </MudGrid>
        <br>
         <MudItem xs="12" Class="d-flex justify-center align-center">
             <MudItem xs="7">
             
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@projectNameLabels" Width="100%" Height="350px"></MudChart>
            
             </MudItem>
              <MudItem xs="1">
             </MudItem>
            <MudItem xs="5">
            <MudTable @ref="@_tablePaymentHistory" Items="@_payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                <HeaderContent>
                    <MudTh>Proyecto</MudTh>
                    <MudTh>Fecha de pago</MudTh>
                    <MudTh>Salario neto</MudTh>
                    <MudTh><MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/{email}/Payment_History")"> Ver más </MudLink></MudTh>
                </HeaderContent>
                <RowTemplate Context="row">
                    <MudTd DataLabel="Proyecto">@row.ProjectName</MudTd> 
                    <MudTd DataLabel="Fecha pago">@row.PaymentDate</MudTd>
                    <MudTd DataLabel="Salario neto">@row.NetSalary</MudTd>
                     @*
                    <MudTd DataLabel="Ver más" >
                        <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/Last_Pay/{email}/{@row.ProjectName}")">ver más </MudLink>
                    </MudTd>
                    *@
                </RowTemplate>
            </MudTable>
            </MudItem>
            <br>
         </MudItem>
          <br>
          <MudText Align="Align.Center" Typo="Typo.h6" GutterBottom="true">Salario neto, Deducciones voluntarias y Deducciones obligatorias</MudText>
          <br>
          <MudItem xs="12" Class="d-flex justify-center align-center">
            
             <MudItem xs="4">
                 <MudChart ChartType="ChartType.Pie" InputData="@costNetSalary"  InputLabels="@projectNameLabels" Width="300px" Height="300px"/>
             </MudItem>
            
            <MudItem xs="4">
                <MudChart ChartType="ChartType.Pie" InputData="@costVoluntaryDeductions"  InputLabels="@projectNameLabels" Width="300px" Height="300px" />
            </MudItem>  
     
            <MudItem xs="4">
                <MudChart ChartType="ChartType.Pie" InputData="@costLegalDeductions"  InputLabels="@projectNameLabels" Width="300px" Height="300px" />
            </MudItem>
         </MudItem>
          
             
             
    }else
    {
        <MudText Align="Align.Center" Typo="Typo.h6">
            No existen pagos
        </MudText>
    }
}

@code {
    [Parameter]
    public string email { get; set; }

    private bool _loading = true;
    private bool _empty = true;
    private bool _payTaxes = false;

    private MudTable<PaymentHistoryModel>  _tablePaymentHistory;
    private IList<PaymentHistoryModel> _payments = new List<PaymentHistoryModel>();
    private IEnumerable<PaymentHistoryModel> _paymentsHistory = new List<PaymentHistoryModel>();

    private IList<Payment> _paymentsList = new List<Payment>();
    private IList<Subscription> _deductions = new List<Subscription>();
    private IEnumerable<LegalDeduction> _legalDeductions = new List<LegalDeduction>();
    private IList<String> _paymentsDates = new List<String>();
    private IList<String> _paymentsProjectNames = new List<String>();

    private IList<Double> _paymentsNetSalaryCost = new List<Double>();
    private IList<Double> _paymentsVoluntaryDeductionsCost = new List<Double>();
    private IList<Double> _paymentsLegalDeductionsCost = new List<Double>();

    private Agreement _agreement;
    private double _costVoluntaryDeductions;
    private double _costLegalDeductions;
    private double _costNetSalary;

    public string[] projectNameLabels;
    public double[] costNetSalary;
    public double[] costVoluntaryDeductions;
    public double[] costLegalDeductions;

    int dataSize = 0;

   


    public List<ChartSeries> Series = new List<ChartSeries>()
    {
       new ChartSeries() { Name = "Salario Neto", Data = new double[] { 40, 20, 25, 27, 46} },
       new ChartSeries() { Name = "Deducciones Voluntarias", Data = new double[] { 40, 20, 25, 27, 46} },
       new ChartSeries() { Name = "Deducciones obligatorias", Data = new double[] { 40, 20, 25, 27, 46 } },
    };

    protected override async Task OnParametersSetAsync()
    {
        _paymentsList = (IList<Payment>) await PaymentService.GetEmployeeLastestPayments(email);
        _paymentsHistory = await GetLatestPayments();
        GetProyectNames();
        dataSize = _paymentsProjectNames.Length();
        costNetSalary =_paymentsNetSalaryCost.ToArray();
        costVoluntaryDeductions =_paymentsVoluntaryDeductionsCost.ToArray();
        costLegalDeductions =_paymentsLegalDeductionsCost.ToArray();
        _loading = false;
    }

    private async Task<IList<PaymentHistoryModel>> GetLatestPayments()
    {
        foreach (Payment payment in _paymentsList){
            await GetContractType(payment.EmployerEmail, payment.ProjectName);
            _costLegalDeductions = await GetLegalDeductions(payment.GrossSalary);
            _paymentsLegalDeductionsCost.Add(_costLegalDeductions);
            _costNetSalary = await GetNetSalary(payment.GrossSalary,payment.EmployerEmail, payment.ProjectName, payment.StartDate,payment.EndDate);
            _paymentsNetSalaryCost.Add(_costNetSalary);
            _paymentsVoluntaryDeductionsCost.Add(_costVoluntaryDeductions);
            PaymentHistoryModel _paymentHistoryModel = new PaymentHistoryModel(payment.ProjectName,  _agreement.ContractType,
                payment.EndDate.ToShortDateString(), CostFormat(payment.GrossSalary),CostFormat(_costLegalDeductions),
               CostFormat(_costVoluntaryDeductions), CostFormat(_costNetSalary));
            _payments.Add(_paymentHistoryModel);
        }
        if (_payments.Length() > 0){
            _empty = false;
        }
        return _payments;
    }

    private async Task GetContractType(string employerEmail,string projectName)
    {
        Agreement toSearchagreement = new Agreement(email, employerEmail, projectName, null, "", 0, null, 1, "");
        _agreement = await AgreementService.GetContractee(toSearchagreement);
        if (_agreement.ContractType.Equals("Servicios profesionales"))
        {
            _payTaxes = false;
        }
        else
        {
            _payTaxes = true;
        }
    }

    private async Task<double> GetLegalDeductions(double grossSalary)
    {
        double legalDeductionsCost = 0.0;
        if (_payTaxes){
            _legalDeductions = await LegalDeductionService.GetAllAsync();
            foreach (var item in _legalDeductions)
            {
                legalDeductionsCost += TaxCalculatorService.GetTaxAmount(item.DeductionName, grossSalary);
            }
        }
        return legalDeductionsCost;
    }

    private async Task<double> GetNetSalary(double grossSalary,string employerEmail, string projectName, DateTime startDate, DateTime endDate)
    {
        double netSalary = grossSalary;
        Subscribe searchSubscribe= new Subscribe(email,employerEmail, projectName, "", 0.0, startDate, endDate);
        IList<Subscription> subscriptions = (await SubscribeService.GetSubscriptionCostsByDate(searchSubscribe)).ToList();
        netSalary -= _costLegalDeductions;
        IList<Subscription> _deductionsNotPaid = new List<Subscription>();
        subscriptions = subscriptions.Where(e => e.TypeSubscription == 0).ToList();
        _deductionsNotPaid = PaymentCalculatorService.ApplyDeductions(netSalary, subscriptions);
        subscriptions = subscriptions.Except(_deductionsNotPaid).ToList();
        _deductions = subscriptions;
        double deductionsMountToPay = PaymentCalculatorService.DeductionsCost(subscriptions);
        _costVoluntaryDeductions = deductionsMountToPay;
        if (netSalary < deductionsMountToPay)
        {
            _deductions.Last().Cost = netSalary - (deductionsMountToPay - _deductions.Last().Cost);
            netSalary = 0;
        }
        else
        {
            netSalary -= deductionsMountToPay; 
        }
        return netSalary;
    }


    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }

    private void GetProyectNames()
    {
        foreach (Payment payment in _paymentsList)
        {
            _paymentsProjectNames.Add(payment.ProjectName);
        }
        projectNameLabels = _paymentsProjectNames.ToArray();
    }

}     