@using Application.Payments
@using Application.ContextMenu
@using Domain.Payments.Entities
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.Subscriptions
@using Domain.People.Entities
@using Domain.Subscriptions.Entities
@using Application.LegalDeductions
@using Domain.LegalDeductions.Entities
@using Application.Subscribes
@using Domain.Subscribes.Entities
@using System.Globalization
@using Presentation.Payments.Models
@using Application.People
@using Presentation.Employees.Models
@using Presentation.Shared.Models
@using Application.TaxCalculator
@using Application.PaymentCalculator;

@inject IPaymentService PaymentService
@inject IContextMenuService ContextMenuService
@inject IAgreementService AgreementService
@inject ILegalDeductionService LegalDeductionService
@inject IPersonService PersonService
@inject ISubscribeService SubscribeService
@inject NavigationManager nav
@inject ISubscriptionService SuscriptionService
@inject ITaxCalculatorService TaxCalculatorService
@inject IPaymentCalculatorService PaymentCalculatorService
@page "/Dashboard/{email}/"

@if(_loading) 
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudText>
       
    </MudPaper>
} else 
{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{email}"),
        new BreadcrumbItem("Dashboard último pago", href: null, disabled: true)
    }; 
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
    </MudPaper>
    if (!_empty)
    {
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center align-center">
                <MudItem xs="4">
                     <MudText Align="Align.Center" Typo="Typo.h6" GutterBottom="true">Salario</MudText>
                </MudItem>
             </MudItem>
        </MudGrid>
        <br>
      
        <MudItem xs="12" Class="d-flex justify-center align-center">
            <MudItem xs="4">
                <MudChart ChartType="ChartType.Pie" InputData="@data" InputLabels="@labels" Width="300px" Height="300px"/>
            </MudItem>
      
            <MudItem xs="6">
                <MudSimpleTable Style="overflow-x: auto;">
                <thead>
                    <tr>
                        @foreach (var h in headings)
                        {
                            <th>@h</th> 
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in rows)
                    {
                        <tr>
                            @foreach (var x in row.Split("#"))
                            {
                                <td>@x</td> 
                            }
                            <td> <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/{email}/Payment_History")"> ver más </MudLink></td> 
                        </tr>
                    }
                </tbody>
                </MudSimpleTable>
            </MudItem>
        </MudItem>

             
    }else
    {
        <MudText Align="Align.Center" Typo="Typo.h6">
            No existen pagos
        </MudText>
    }
}

@code {
    [Parameter]
    public string email { get; set; }

    private bool _loading = true;
    private bool _empty = true;
    private bool _payTaxes = false;

    string[] headings = {"Proyecto","Fecha pago","Salario neto", " "};
    IList<string> rows = new List<string>();

    int dataSize = 3;
    double[] data = { 77, 25, 20};
    string[] labels = { "Salario Neto", "Deducciones obligatorias", "Deducciones voluntarias"};

    private Payment _lastestPay;
    private Agreement _agreement;
    private PaymentHistoryModel _latestPayment;

    private IEnumerable<LegalDeduction> _legalDeductions = new List<LegalDeduction>();
    private IList<Subscription> _deductions = new List<Subscription>();

    private double _costVoluntaryDeductions;
    private double _costLegalDeductions;
    private double _costNetSalary;


    protected override async Task OnParametersSetAsync()
    {
        _lastestPay = await PaymentService.GetEmployeeLastestPayment(email);
        if (_lastestPay != null)
        {
            _latestPayment = await GetLatestPayment();
            rows.Add(_latestPayment.ProjectName + "#" + _latestPayment.PaymentDate + "#" + _latestPayment.NetSalary);
            data[0] = _costNetSalary;
            data[1] = _costLegalDeductions;
            data[2] = _costVoluntaryDeductions;
            _empty = false;
        }
        _loading = false;
    }

    private async Task<PaymentHistoryModel> GetLatestPayment()
    {
        await GetContractType(_lastestPay.EmployerEmail, _lastestPay.ProjectName);
        _costLegalDeductions = await GetLegalDeductions(_lastestPay.GrossSalary);
        _costNetSalary = await GetNetSalary(_lastestPay.GrossSalary,_lastestPay.EmployerEmail, _lastestPay.ProjectName, 
            _lastestPay.StartDate,_lastestPay.EndDate);
        PaymentHistoryModel _paymentHistoryModel = new PaymentHistoryModel(_lastestPay.ProjectName,  _agreement.ContractType,
        _lastestPay.EndDate.ToShortDateString(), CostFormat(_lastestPay.GrossSalary),CostFormat(_costLegalDeductions),
        CostFormat(_costVoluntaryDeductions), CostFormat(_costNetSalary));
        return _paymentHistoryModel;
    }

    private async Task GetContractType(string employerEmail,string projectName)
    {
        Agreement toSearchagreement = new Agreement(email, employerEmail, projectName, null, "", 0, null, 1, "");
        _agreement = await AgreementService.GetContractee(toSearchagreement);
        if (_agreement.ContractType.Equals("Servicios profesionales"))
        {
            _payTaxes = false;
        }
        else
        {
            _payTaxes = true;
        }
    }

    private async Task<double> GetLegalDeductions(double grossSalary)
    {
        double legalDeductionsCost = 0.0;
        if (_payTaxes){
            _legalDeductions = await LegalDeductionService.GetAllAsync();
            foreach (var item in _legalDeductions)
            {
                legalDeductionsCost += TaxCalculatorService.GetTaxAmount(item.DeductionName, grossSalary);
            }
        }
        return legalDeductionsCost;
    }

    private async Task<double> GetNetSalary(double grossSalary,string employerEmail, string projectName, DateTime startDate, DateTime endDate)
    {
        double netSalary = grossSalary;
        Subscribe searchSubscribe= new Subscribe(email,employerEmail, projectName, "", 0.0, startDate, endDate);
        IList<Subscription> subscriptions = (await SubscribeService.GetSubscriptionCostsByDate(searchSubscribe)).ToList();
        netSalary -= _costLegalDeductions;
        IList<Subscription> _deductionsNotPaid = new List<Subscription>();
        subscriptions = subscriptions.Where(e => e.TypeSubscription == 0).ToList();
        _deductionsNotPaid = PaymentCalculatorService.ApplyDeductions(netSalary, subscriptions);
        subscriptions = subscriptions.Except(_deductionsNotPaid).ToList();
        _deductions = subscriptions;
        double deductionsMountToPay = PaymentCalculatorService.DeductionsCost(subscriptions);
        _costVoluntaryDeductions = deductionsMountToPay;
        if (netSalary < deductionsMountToPay)
        {
            _deductions.Last().Cost = netSalary - (deductionsMountToPay - _deductions.Last().Cost);
            netSalary = 0;
        }
        else
        {
            netSalary -= deductionsMountToPay; 
        }
        return netSalary;
    }

    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }
}     