@using Application.Payments
@using Application.ContextMenu
@using Domain.Payments.Entities
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.Subscriptions
@using Domain.People.Entities
@using Domain.Subscriptions.Entities
@using Application.LegalDeductions
@using Domain.LegalDeductions.Entities
@using Application.Subscribes
@using Domain.Subscribes.Entities
@using System.Globalization
@using Presentation.Payments.Models
@using Application.People
@using Application.TaxCalculator
@using Presentation.Employees.Models

@inject IPaymentService PaymentService
@inject IContextMenuService ContextMenuService
@inject IAgreementService AgreementService
@inject ILegalDeductionService LegalDeductionService
@inject IPersonService PersonService
@inject ISubscribeService SubscribeService
@inject NavigationManager nav
@inject ISubscriptionService SuscriptionService
@inject ITaxCalculatorService TaxCalculatorService
@page "/{email}/Payment_History"

@if(_loading) 
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudText>
       
    </MudPaper>
} else 
{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Proyectos", href: $"/Projects/{email}"),
        new BreadcrumbItem("Reporte histórico de pagos", href: null, disabled: true)
    }; 
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
    </MudPaper>
    if (_empty)
    {
        <MudTable @ref="@_tablePaymentHistory" Items="@_payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
            <ToolBarContent>
                    <MudText Align="Align.Center" Typo="Typo.h6">Reporte histórico de pagos:</MudText>
                    <MudSpacer /> 
            </ToolBarContent> 
            <HeaderContent>
                <MudTh>Proyecto</MudTh>
                <MudTh>Tipo contrato</MudTh>
                <MudTh>Fecha pago</MudTh>
                <MudTh>Salario Bruto</MudTh>
                <MudTh>Deducciones obligatorias</MudTh>
                <MudTh>Deducciones voluntarias</MudTh>
                <MudTh>Salario neto</MudTh>
            </HeaderContent>
           
            <RowTemplate>
                    <MudTd DataLabel="Proyecto">@context.ProjectName</MudTd>
                    <MudTd DataLabel="Tipo contrato">@context.ContractType</MudTd>
                    <MudTd DataLabel="Fecha pago">@context.PaymentDate</MudTd>
                    <MudTd DataLabel="Salario Bruto">@context.GrossSalary</MudTd>
                    <MudTd DataLabel="Deducciones obligatorias">@context.LegalDeductions</MudTd>
                    <MudTd DataLabel="Deducciones voluntarias">@context.VoluntaryDeductions</MudTd>
                    <MudTd DataLabel="Salario neto">@context.NetSalary</MudTd>
            </RowTemplate>
        </MudTable>
   
    }else
    {
        <MudText Align="Align.Center" Typo="Typo.h6">
            No existen pagos
        </MudText>
    }
}


@code {
    [Parameter]
    public string email { get; set; }

    private bool _loading = true;
    private bool _empty = true;

    private MudTable<PaymentHistoryModel>  _tablePaymentHistory;
    private IList<PaymentHistoryModel> _payments = new List<PaymentHistoryModel>();

    private IList<Payment> _paymentsList = new List<Payment>();
    private IList<Subscription> _deductions = new List<Subscription>();
    private IEnumerable<LegalDeduction> _legalDeductions = new List<LegalDeduction>();

    private CultureInfo _cultureCR = CultureInfo.GetCultureInfo("es-CR");

    private Agreement _agreement;
    private double _costVoluntaryDeductions;
    private double _costLegalDeductions;
    private double _costNetSalary;


    protected override async Task OnParametersSetAsync()
    {
        _paymentsList = (IList<Payment>) await PaymentService.GetEmployeePayments(email);
        await GetPaymentHistory();
        _loading = false;
    }

    private async Task GetPaymentHistory()
    {
        foreach (Payment payment in _paymentsList){
            await GetContractType(payment.EmployerEmail, payment.ProjectName);
            _costVoluntaryDeductions = await GetVoluntaryDeductionsCost(payment.EmployerEmail, payment.ProjectName, payment.StartDate,payment.EndDate);
            _costNetSalary = await GetNetSalary(payment.GrossSalary, _costVoluntaryDeductions);
            _costLegalDeductions = await GetLegalDeductions(payment.GrossSalary, _costVoluntaryDeductions);

            PaymentHistoryModel _paymentHistoryModel = new PaymentHistoryModel(payment.ProjectName,  
                _agreement.ContractType, payment.EndDate.ToShortDateString(),
               _cultureCR.NumberFormat.CurrencySymbol+CostFormat(payment.GrossSalary), 
               _cultureCR.NumberFormat.CurrencySymbol+CostFormat(_costLegalDeductions),
               _cultureCR.NumberFormat.CurrencySymbol+CostFormat(_costVoluntaryDeductions), 
               _cultureCR.NumberFormat.CurrencySymbol+CostFormat(_costNetSalary));
            _payments.Add(_paymentHistoryModel);
        }
    }

    private async Task GetContractType(string employerEmail,string projectName)
    {
        Agreement toSearchagreement = new Agreement(email, employerEmail, projectName, null, "", 0, null, 1, "");
        _agreement = await AgreementService.GetContractee(toSearchagreement);
    }

    private async Task<double> GetVoluntaryDeductionsCost(string employerEmail, string projectName, DateTime startDate, DateTime endDate)
    {
        double voluntaryDeductionsCost = 0.0;
        Subscribe searchSubscribe= new Subscribe(email,  employerEmail, projectName, "", 0.0, startDate,  endDate);
        IEnumerable<Subscription> subscriptions = await SubscribeService.GetSubscriptionCostsByDate(searchSubscribe);
        foreach (var item in subscriptions)
        {
            if(item.TypeSubscription == 0)
            {
                voluntaryDeductionsCost += item.Cost;
            }
        }
        return voluntaryDeductionsCost;
    }

    private async Task<double> GetLegalDeductions(double grossSalary, double voluntaryDedudctions)
    {
        double legalDeductionsCost = 0.0;
        _legalDeductions = await LegalDeductionService.GetAllAsync();
        foreach (var item in _legalDeductions)
        {
            legalDeductionsCost += TaxCalculatorService.GetTaxAmount(item.DeductionName, grossSalary);
        }
        return legalDeductionsCost;
    }

    private async Task<double> GetNetSalary(double grossSalary, double voluntaryDedudctions)
    {
        double netSalary = grossSalary;
        netSalary -= voluntaryDedudctions;
         _legalDeductions = await LegalDeductionService.GetAllAsync();
        foreach (var item in _legalDeductions)
        {
            netSalary -= TaxCalculatorService.GetTaxAmount(item.DeductionName, grossSalary);
        }
        return netSalary;
    }

    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }
}     