@page "/Create_Employee"
@using Application.Persons
@using Domain.Persons.Entities

@using Application.Accounts
@using Domain.Accounts.Entities
@using Domain.Accounts.DTOs
@using Presentation.Core.Components
@using Presentation.Accounts.Models
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject ISnackbar Snackbar
@inject IPersonService PersonService
@inject IAccountService AccountService


@*Navigation footprint *@
@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "#"),
        new BreadcrumbItem("Cuenta", href: "#"),
    };
}
 <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

 
<MudGrid>
    <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudSpacer></MudSpacer>
            <MudText Align="Align.Center" Typo="Typo.h6">Información del empleado</MudText>
            <MudForm @ref="form">
                    <MudGrid>
                    @*Small fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Name" Label="Nombre" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Email" Label="Email" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.LastName1" Label="Primer Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.LastName2" Label="Segundo Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                     <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.PhoneNumber" Label="Teléfono" Variant="Variant.Outlined" ></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Ssn" Label="Cedula" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    @*Large fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.Adress" Label="Dirección" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.BankAccount" Label="Cuenta Bancaria" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    <MudDivider />
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                    <MudTextField @bind-Value="accountInfo.Password" Label="Contraseña" Variant="Variant.Outlined" @ref="pwField1" InputType="InputType.Password"  Required="true" RequiredError="Campo requerido" 
                    Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" ></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                    <MudTextField T="string" Label="Confirmación de Contraseña" Variant="Variant.Outlined" InputType="InputType.Password"  Validation="@(new Func<string, string>(PasswordMatch))" Required="true" RequiredError="Campo requerido" ></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    @*Create buton *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8" >
                    
                        <MudButton Disabled="@snackHandler._saving" OnClick="SavePersonInfo" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (snackHandler._saving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                <MudText>Crear</MudText>
                            }
                        </MudButton>
                        <MudButton Disabled="true"> </MudButton>
                        @*Clear buton *@
                        <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Error">
                                <MudText>Limpiar</MudText>
                        </MudButton>
                        
                    </MudItem>
                    <MudItem xs="2"></MudItem>
                    
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    Person personInfo = new Person("", "", "", "", Int32.Parse("0"), "", "", "");
    MudTextField<string> pwField1;
    Account accountInfo = new Account("","");
    SnackHandler snackHandler = new SnackHandler();
    MudForm form;

    async Task SavePersonInfo()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid && ValidateInfo(personInfo))
        {
            await PersonService.CreatePersonAsync(personInfo);
            accountInfo.Email = personInfo.Email;
            await AccountService.CreateAccountAsync(accountInfo);
            snackHandler._saving = false;
            ShowSnackNotification("Persona "+personInfo.Name+" creado", Severity.Success);
        }
        snackHandler._saving = false;
    }

    bool ValidateSsn(Person personInfo)
    {
        bool valid = true;
        if (personInfo.Ssn == 0 || personInfo.Ssn < 0)
        {
            ShowSnackNotification("Número de cédula incorrecta", Severity.Error);
            valid = false;
        }
        return valid;
    }

    bool ValidateEmail(Person personInfo)
    {
        bool valid = true;

        valid = personInfo.Email.Contains('@');
        if (!valid)
        {
            ShowSnackNotification("El email debe contener un @", Severity.Error);
        }
        return valid;
    }

    bool ValidateInfo(Person personInfo)
    {
        bool ssn = ValidateSsn(personInfo);
        bool email = ValidateEmail(personInfo);
        return ssn && email;
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {

        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Contraseña es requerida!";
            yield break;
        }
        if (pw.Length < 8)
        {
            yield return "La contraseña debe tener al menos 8 caracteres";
        }
        if (!Regex.IsMatch(pw, @"[A-Z]"))
        {
            yield return "Debe contener al menos una letra mayúscula";
        }
        if (!Regex.IsMatch(pw, @"[a-z]"))
        {
            yield return "Debe contener al menos una letra minúscula";
        }

        if (!Regex.IsMatch(pw, @"[0-9]"))
        {
            yield return "Debe contener al menos un dígito";
        }
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Contraseñas no coinciden";
        return null;
    }


    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        personInfo.Name = "";
        personInfo.Email = "";
        personInfo.LastName1 = "";
        personInfo.LastName2 = "";
        personInfo.Adress = "";
        personInfo.BankAccount = "";
        personInfo.PhoneNumber = "";
        personInfo.Ssn = 0;
        accountInfo.Password = "";
    }
}
