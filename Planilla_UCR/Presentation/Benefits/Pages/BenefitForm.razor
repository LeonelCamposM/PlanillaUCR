@page "/Projects/{employerEmail}/{projectName}/Benefits/New"
@using Domain.Subscriptions.Entities
@using Application.Subscriptions
@using Presentation.Benefits.Components
@using Presentation.Core.Components
@using System.Globalization
@inject ISubscriptionService SubscriptionService
@inject ISnackbar Snackbar
@inject NavigationManager nav

@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem($"{projectName}", href: $"/Projects/{employerEmail}/{projectName}/Configurations"),
        new BreadcrumbItem("Beneficios", href: $"/Projects/{employerEmail}/{projectName}/Benefits"),
        new BreadcrumbItem("Nuevo beneficio", href: null, disabled: true)
    };
}
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper  Height="250px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">Añadir beneficio</MudText>
            <MudForm @ref="form">
            <MudGrid>
            <MudItem xs="2">
            </MudItem>
            <MudItem xs="8">
                <MudTextField @bind-Value="subscriptionInfo.SubscriptionName" Label="Nombre" Variant="Variant.Outlined"  Required="true" RequiredError="Campo requerido"></MudTextField>
            </MudItem>
            <MudItem xs="2">
            </MudItem>

            <MudItem xs="2">
            </MudItem>
            <MudItem xs="4">
                <MudNumericField Immediate="true" Label="Costo" Format="N2" Culture="@cultureCR" Variant="Variant.Outlined" @bind-Value="_cost" 
                    Adornment="Adornment.Start" AdornmentText="@cultureCR.NumberFormat.CurrencySymbol" Required="true" RequiredError="Campo requerido"/>
            </MudItem>

            <MudItem xs="4">
                <MudTextField @bind-Value="subscriptionInfo.ProviderName" MaxLength="255" Label="Organización" Variant="Variant.Outlined"  Required="true" RequiredError="Campo requerido"></MudTextField>
            </MudItem>

            <MudItem xs="2">
            </MudItem>
            <MudItem xs="2">
            </MudItem>
            <MudItem xs="8">
                <MudTextField @bind-Value="subscriptionInfo.SubscriptionDescription"  MaxLength="600" Label="Descripción" Variant="Variant.Outlined"  Required="true" RequiredError="Campo requerido"></MudTextField>
            </MudItem>

            <MudItem xs="2">
            </MudItem>
            <MudItem xs="2">
            </MudItem>
            <MudItem xs="8" >
                <MudButton Disabled="@snackHandler._saving" OnClick=" SaveBenefit" Variant="Variant.Filled" Color="Color.Primary">
                    @if (snackHandler._saving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Procesando</MudText>
                    }
                    else
                    {
                        <MudText>Crear</MudText>
                    }
                </MudButton>
                <MudButton Disabled="true"> </MudButton>
                <MudButton OnClick="GoToMain" Variant="Variant.Filled" Color="Color.Transparent">
                        <MudText>Cancelar</MudText>
                </MudButton>
            </MudItem>
            <MudItem xs="2"></MudItem>

            </MudGrid>
        </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    private double? _cost;
    SnackHandler snackHandler = new SnackHandler();
    Subscription subscriptionInfo = new Subscription("", "", "", "", "", 0.0, 1, 1);
    MudForm form;
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }


    async Task SaveBenefit()
    {
        subscriptionInfo.EmployerEmail = employerEmail;
        subscriptionInfo.ProjectName = projectName;
        subscriptionInfo.Cost = Convert.ToDouble(_cost);
        Subscription subscriptionToAdd = subscriptionInfo;
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                await SubscriptionService.CreateSubscriptionAsync(subscriptionToAdd);
                snackHandler._saving = false;
                ShowSnackNotification("Beneficio "+subscriptionToAdd.SubscriptionName+" creado", Severity.Success);
            }
            catch (Exception)
            {
                snackHandler._saving = false;
                ShowSnackNotification("Ya existe un beneficio con el nombre "+subscriptionToAdd.SubscriptionName, Severity.Error);
            }
        }
        snackHandler._saving = false;
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    private void GoToMain()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Benefits");
    }
}