@page "/Projects/{employerEmail}/{projectName}/Benefits/Configurations"
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Presentation.Core.Components
@using Presentation.Benefits.Components
@using System.Globalization
@inject ISnackbar Snackbar
@inject ISubscriptionService SubscriptionService
@inject NavigationManager nav

@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem($"{projectName}", href: $"/Projects/Details/{employerEmail}/{projectName}"),
        new BreadcrumbItem("Beneficios", href: $"/Projects/{employerEmail}/{projectName}/Benefits"),
        new BreadcrumbItem("Configuraciones", href: $"/Projects/{employerEmail}/{projectName}/Benefits/Configurations"),
    };
}

@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}
else
{   
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    @if (_empty)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No hay deducciones asociadas al proyecto
        </MudText>
        <br>
        <MudToolBar DisableGutters="true" Class="gap-4">
            <MudButton></MudButton>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">
                <MudText> 
                Crear deducción voluntaria
                </MudText> 
            </MudButton>
            <MudSpacer></MudSpacer>
            <MudButton></MudButton>
        </MudToolBar>
    }
    else
    {
        <MudTable @ref="mudTable" Items="@Elements" RowsPerPage="6" MultiSelection="true" @bind-SelectedItems="selectedItems1" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<Subscription,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Align="Align.Center" Typo="Typo.h6">Lista de beneficios </MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Proveedor</MudTh>
                <MudTh>Costo</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">
                    <MudLink Color="Color.Secondary" Href="@($"/Projects/{@context.EmployerEmail}/{@context.ProjectName}/Benefits/{@context.SubscriptionName}")">
                        @context.SubscriptionName
                    </MudLink>
                </MudTd>
                <MudTd DataLabel="Descripción">@context.ProviderName</MudTd>
                <MudTd DataLabel="Costo"> @cultureCR.NumberFormat.CurrencySymbol @costFormat(context.Cost) </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTd colspan="5">Seleccionar todo</MudTd>
            </FooterContent>
            <PagerContent>
                <MudPagination SelectedChanged="PageChanged" Count="@((mudTable.GetFilteredItemsCount() + mudTable.RowsPerPage - 1) / mudTable.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
            </PagerContent>
        </MudTable>
        <MudText Inline="true">Beneficios seleccionados: @(selectedItems1==null ? "" : string.Join(", ", selectedItems1.OrderBy(x=>x.SubscriptionName).Select(x=>x.SubscriptionName)))</MudText>
        <br>
        <br>
        <br>
        <MudDivider />
        <MudToolBar DisableGutters="true" Class="gap-4">
            <MudButton Variant="Variant.Filled" OnClick="DeleteBenefits" Color="Color.Error">Borrar</MudButton>
        </MudToolBar>
    }
}

@code {
    private bool _empty = true;
    private bool _loading = true;
    private HashSet<Subscription> selectedItems1 = new HashSet<Subscription>();
    private IEnumerable<Subscription> Elements;
    private MudTable<Subscription> mudTable;
    public string searchString1 = "";
    public string project { get; set; }
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Elements = await SubscriptionService.GetBenefitsByProject(employerEmail, projectName);
        _loading = false;
        if (Elements.Length() > 0){
            _empty = false;
        }
    }

    private void DeleteBenefits()
    {
        string message = "¿Desea borrar los beneficios seleccionados?";
        Snackbar.Add(message, Severity.Warning, config =>
        {
            config.Action = "Confirmar";
            config.RequireInteraction = true;
            config.ShowCloseIcon = false;
            config.Onclick = snackbar =>
            {
                DeleteBenefitsUpdate();
                return Task.CompletedTask;
            };
        });
    }

    private bool FilterFunc1(Subscription element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Subscription element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SubscriptionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void DeleteBenefitsUpdate()
    {
        Snackbar.Add("Beneficios borrados", Severity.Success);
        StateHasChanged();
    }

    private void PageChanged(int i)
    {
        mudTable.NavigateTo(i - 1);
    }

    private void GoToMain()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Benefits");
    }

    private void GoToCreate()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions/New");
    }

    private string costFormat(double cost)
    {
        string costo = string.Format("{0:N}", cost);
        return costo;
    }
}