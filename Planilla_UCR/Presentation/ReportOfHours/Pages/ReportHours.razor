@page "/Projects/ReportHours"
@using Application.ReportOfHours
@using Domain.ReportOfHours.Entities
@inject IReportOfHoursService HoursReportService

<h3>HoursReport</h3>
@hoursReport.EmployeeEmail
@hoursReport.EmployeeEmail




@using Presentation.Shared.Models
@using Presentation.Core.Components
@inject ISnackbar Snackbar
@inject NavigationManager nav

@*Navigation footprint *@
@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        //new BreadcrumbItem("Proyectos", href: $"/Projects/{email}"),
        //new BreadcrumbItem(@projectName, href: $"/Projects/Details/{email}/{projectName}"),
        //new BreadcrumbItem("Nuevo Reporte", href: $"/Projects/ReportHours"),
    };
}
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudGrid>
    <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudSpacer></MudSpacer>
            <MudText Align="Align.Center" Typo="Typo.h6">Información del empleado</MudText>
            <MudForm @ref="form">
                    <MudGrid>
                    @*Small fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="hoursReport.ProjectName" Label="Nombre" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="hoursReport.ReportDate" Label="Nombre" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="hoursReport.ReportHours" Label="Primer Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>

                    @*Large fields *@
                    @*<MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.Adress" Label="Dirección" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.BankAccount" Label="Cuenta Bancaria" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    
                        <br />
                        <MudDivider />
                    </MudItem>
                    <MudItem xs="2"></MudItem>*@

                    @*Create buton *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8" >
                    
                        <MudButton Disabled="@snackHandler._saving" OnClick="SaveReportInfo" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (snackHandler._saving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                <MudText>Registrar</MudText>
                            }
                        </MudButton>
                        <MudButton Disabled="true"> </MudButton>

                        @*Clear buton *@
                        <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                                <MudText>Limpiar</MudText>
                        </MudButton>
                        
                    </MudItem>
                    <MudItem xs="2"></MudItem>
                    
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    SnackHandler snackHandler = new SnackHandler();
    MudForm form;

    //[Parameter]
    //public string EmployerEmail { set; get; }
    //[Parameter]
    //public string projectName { set; get; }
    //[Parameter]
    //public string EmployeeEmail { set; get; }

    // @page "/Projects/ReportHours/{EmployerEmail}/{ProjectName}/{EmployeeEmail}"
    public float hours { get; set; } = 5.4f;
    public DateTime date1 { get; set; }
    HoursReport hoursReport = new HoursReport("leonel@ucr.ac.cr","Proyecto 1","mau@ucr.ac.cr",null, 0);

    async Task SaveReportInfo()
    {
        snackHandler._saving = true;
        //await form.Validate();
        if (true)
        {
            date1 = new DateTime(2016, 1, 1, 8, 47, 0);
            hoursReport.ReportDate = date1;
            await HoursReportService.CreateReportAsync(hoursReport);
        }
        snackHandler._saving = false;
        ShowSnackNotification("Reporte de horas creado",Severity.Success);
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 2;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
    //    hoursReport.Name = "";
    //    hoursReport.Email = "";
    //    hoursReport.LastName1 = "";
    //    hoursReport.LastName2 = "";
    //    hoursReport.Adress = "";
    //    hoursReport.BankAccount = "";
    //    hoursReport.PhoneNumber = "";
    //    hoursReport.Ssn = 0;
    }

}
