@page "/Projects/ReportHours/{EmployerEmail}/{ProjectName}/{EmployeeEmail}"
@using Application.ReportOfHours
@using Domain.ReportOfHours.Entities
@using Presentation.Shared.Models
@using Presentation.Core.Components
@using Application.Projects
@using Domain.Projects.Entities
@inject ISnackbar Snackbar
@inject IReportOfHoursService HoursReportService
@inject IProjectService ProjectService
@inject NavigationManager nav

@*Navigation footprint *@
@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Proyectos", href: $"/Projects/{EmployeeEmail}"),
        new BreadcrumbItem(@projectName, href: $"/Projects/Details/{EmployeeEmail}/{projectName}"),
        new BreadcrumbItem("Nuevo Reporte", href: null, disabled: true),
    };
}
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>


@if(_loading) {
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
       
    </MudPaper>
}else{
    @if (!_loading)
        {
            <MudGrid>
                <MudItem xs="10" sm="12">
                    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                        <MudSpacer></MudSpacer>
                        <MudText Align="Align.Center" Typo="Typo.h6">Reporte de horas</MudText>
                        <MudForm @ref="form">
                                <MudGrid>
                                <MudItem xs="2"></MudItem>
                                <MudItem xs="8">
                                    <MudSelect @bind-Value="hoursReport.ProjectName" Label="Nombre de Proyecto" Variant="Variant.Outlined" Required="true"  RequiredError="El nombre de proyecto es necesario">
                                        @foreach (var part in _elements)
                                        {
                                            <MudSelectItem T="string" Value=part.ProjectName></MudSelectItem>

                                        }
                                    </MudSelect>
                                </MudItem>  
                                <MudItem xs="2"></MudItem>

                                <MudItem xs="2"></MudItem>
                                 <MudItem xs="8">
                                    <MudDatePicker Label="Fecha del reporte" @bind-Date="hoursReport.ReportDate" DateFormat="yyyy.MM.dd" Variant="Variant.Outlined" Required="true" RequiredError="La fecha de reporte es necesaria"/>
                                </MudItem>
                                <MudItem xs="2"></MudItem>

                                 <MudItem xs="2"></MudItem>
                                <MudItem xs="8">
                                    <MudNumericField @bind-Value="hoursReport.ReportHours" Label="Horas trabajadas" Required="true" Variant="Variant.Outlined" RequiredError="El número de horas es necesario"></MudNumericField>
                                </MudItem>
                                 <MudItem xs="2"></MudItem>

                                @*Create buton *@
                                <MudItem xs="2"></MudItem>
                                <MudItem xs="8" >
                                <MudDivider />
                                <br>
                                    <MudButton Disabled="@snackHandler._saving" OnClick="SaveReportInfo" Variant="Variant.Filled" Color="Color.Primary">
                                        @if (snackHandler._saving)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                            <MudText Class="ms-2">Procesando</MudText>
                                        }
                                        else
                                        {
                                            <MudText>Reportar</MudText>
                                        }
                                    </MudButton>
                                    <MudButton Disabled="true"> </MudButton>

                                    @*Clear buton *@
                                    <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                                            <MudText>Restablecer</MudText>
                                    </MudButton>
                        
                                </MudItem>
                                <MudItem xs="2"></MudItem>
                            </MudGrid>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    }

@code {
    SnackHandler snackHandler = new SnackHandler();
    MudForm form;
    private IEnumerable<Project> _elements;
    private bool _loading = true;
    private bool empty = true;

    [Parameter]
    public string EmployerEmail { set; get; }
    [Parameter]
    public string projectName { set; get; }
    [Parameter]
    public string EmployeeEmail { set; get; }

    public float hours { get; set; } = 5.4f;
    HoursReport hoursReport = new HoursReport("","","",null, 0);
    DateTime? startDate;

    protected override async Task OnInitializedAsync()
    {
        _elements = await ProjectService.GetEmployerProyects(EmployerEmail);
        if (_elements.Length() == 0)
        {
            empty = true;
        }
        else
        {
            empty = false;
        }
        _loading = false;
        hoursReport.ReportDate = DateTime.Now;
        hoursReport.ProjectName = projectName;
        hoursReport.EmployerEmail = EmployerEmail;
        hoursReport.EmployeeEmail = EmployeeEmail;
    }

    async Task SaveReportInfo()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid)
        {
            await HoursReportService.CreateReportAsync(hoursReport);
        }
        snackHandler._saving = false;
        ShowSnackNotification("Reporte de horas creado",Severity.Success);
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 2;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        hoursReport.ReportDate = DateTime.Now;
        hoursReport.ProjectName = projectName;
        hoursReport.ReportHours = 0;
    }

}
