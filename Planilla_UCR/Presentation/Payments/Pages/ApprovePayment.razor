@page "/Approve_Payment/{email}"

@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.ContextMenu
@using Application.Projects
@using Domain.Projects.Entities
@using Domain.Payments.Entities
@using Application.Payments
@using Domain.People.Entities
@using Application.People
@using Domain.ReportOfHours.Entities
@using Application.ReportOfHours
@using Domain.Subscribes.Entities
@using Domain.Subscriptions.Entities
@using Application.Subscribes
@using Presentation.Payments.Models
@using System.Globalization

@inject IAgreementService AgreementService
@inject IContextMenuService ContextService
@inject IProjectService ProjectService
@inject IPaymentService PaymentService
@inject IPersonService PersonService
@inject IReportOfHoursService ReportHoursService
@inject ISubscribeService SubscribeService
@inject ISnackbar Snackbar

@if(_loading) {
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudText>
       
    </MudPaper>
}else
    {
        <MudTable @ref="_mudTable" Items="@_employeesList.Where(e=>e.MountToPay != 0)" RowsPerPage="4" MultiSelection="true" @bind-SelectedItems="_selectedItems1" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<EmployeeAgreement,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Align="Align.Center" Typo="Typo.h6">Empleados con pagos pendientes en @_nextPay.ToShortDateString()</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Tipo de contrato</MudTh>
                <MudTh Style="text-align:right">Monto a pagar</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.FullName</MudTd>
                <MudTd DataLabel="Tipo de contrato">@context.ContractType</MudTd>
                <MudTd DataLabel="Costo" Style="text-align:right"> @cultureCR.NumberFormat.CurrencySymbol @costFormat(context.MountToPay) </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudPagination SelectedChanged="PageChanged" Count="@((_mudTable.GetFilteredItemsCount() + _mudTable.RowsPerPage - 1) / _mudTable.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
            </PagerContent>
        </MudTable>
        <br>
        <MudToolBar DisableGutters="true" Class="gap-4">
            <MudButton Variant="Variant.Filled" OnClick="RegisterPayment" Color="Color.Primary">Pagar</MudButton>
        </MudToolBar>
}

@code {
    [Parameter]
    public string email { get; set; }
    private Agreement _firstProjectAgreement = new Agreement("No tiene contratos todavía","","",DateTime.Now,"",0,DateTime.Now,0,"");
    private Project _projectInfo = new Project("","","",0.0,0,"",1);
    private bool _loading = true;
    private DateTime _nextPay = DateTime.Now;
    private bool _canPay = false;
    private IList<Agreement> _employees = new List<Agreement>();
    private IEnumerable<EmployeeAgreement> _employeesPayment = new List<EmployeeAgreement>();
    private PaymentCalculator _calculator = new PaymentCalculator();
    private MudTable<EmployeeAgreement> _mudTable;
    private HashSet<EmployeeAgreement> _selectedItems1 = new HashSet<EmployeeAgreement>();
    private HoursReport _report = new HoursReport();
    private IList<EmployeeAgreement> _employeesList = new List<EmployeeAgreement>();
    private double _daysInterval = 0;
    public string searchString1 = "";
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");

    protected override async Task OnParametersSetAsync()
    {
        //await PaymentService.GetEmployeeLastPayment();
        _employees = await AgreementService.GetProjectAgreements(ContextService.GetProjectsContext(), email); 
        await GetFirstProjectAgreementDate();
        GetNextPay();
        if(_nextPay <= DateTime.Now)
        {
            _canPay = true;
            await CreateTable();
        }
        _loading = false;
    }

    private async Task CreateTable()
    {
        IEnumerable<Person> _people = await PersonService.GetAllPeopleAsync();
        _employeesPayment = from _agreement in _employees
                            join _person in _people on _agreement.EmployeeEmail equals _person.Email
                            select new EmployeeAgreement
                  {
                        ProjectName = _agreement.ProjectName,
                        EmployeeEmail = _agreement.EmployeeEmail,
                        EmployeeName = _person.Name,
                        EmployeeLastName1 = _person.LastName1,
                        EmployeeLastName2 =  _person.LastName2,
                        FullName = _person.Name + " " + _person.LastName1 + " " + _person.LastName2,
                        ContractType = _agreement.ContractType,
                        ContractStartDate = (DateTime) _agreement.ContractStartDate,
                        ContractFinishDate = (DateTime) _agreement.ContractFinishDate,
                        MountPerHour = _agreement.MountPerHour,
                        MountToPay = 0
                    };
        await GetAllEmployeesSalaries();
    }

    private async Task GetAllEmployeesSalaries()
    {
        foreach (EmployeeAgreement _employeeAgreement in _employeesPayment)
        {
            _employeeAgreement.MountToPay = await GetSalary(_employeeAgreement.MountPerHour,
                _employeeAgreement.ContractType, _employeeAgreement.EmployeeEmail,
                _employeeAgreement.ContractStartDate);
            _employeesList.Add(_employeeAgreement);
        }
    }

    private async Task<double> GetSalary(int mountPerHour, string contractType, string employeeEmail, DateTime startDate)
    {
        int workedDays = GetWorkedDays(employeeEmail, startDate);
        double salary = 0;
        double appliedBenefits = await GetEmployeeBenefits(employeeEmail);

        if (contractType == "Tiempo completo")
        {
            salary = _calculator.GetFullTimeSalary(mountPerHour, workedDays);
        }
        if (contractType == "Medio tiempo")
        {
            salary = _calculator.GetPartTimeSalary(mountPerHour, workedDays);
        }
        if (contractType == "Por horas")
        {
            // Hay que sacar la suma total de las horas trabajadas
            double workedHours = await GetWorkedHours(employeeEmail);
            salary = _calculator.GetSalaryPerHours(mountPerHour, workedHours);
        }
        salary += appliedBenefits;
        return salary;
    }

    private async Task<double> GetEmployeeBenefits(string employeeEmail)
    {
        double mountOfBenefits = 0;
        Subscribe searchSubscribe= new Subscribe(employeeEmail, _projectInfo.EmployerEmail, _projectInfo.ProjectName, "", 0.0, (DateTime)_firstProjectAgreement.ContractStartDate, _nextPay);
        IEnumerable<Subscription> subscriptions = await SubscribeService.GetSubscribes(searchSubscribe);
        foreach (Subscription _subscription in subscriptions.Where(e=> e.TypeSubscription == 1))
        {
            mountOfBenefits += _subscription.Cost;
        }
        return mountOfBenefits;
    }

    private async Task<double> GetWorkedHours(string employeeEmail)
    {
        double _workedHours = 0;
        _report.EmployeeEmail = employeeEmail;
        _report.ReportDate = _firstProjectAgreement.ContractStartDate;
        IList<HoursReport> reports = await ReportHoursService.GetEmployeeReports(_report, _nextPay);
        foreach (HoursReport hours in reports)
        {
            _workedHours = hours.ReportHours;
        }
        return _workedHours;
    }

    private int GetWorkedDays(string employeeEmail, DateTime startDate)
    {
        int _workedDays = Convert.ToInt32(_daysInterval);
        if (startDate.Month == _nextPay.Month)
        {
            _workedDays = _nextPay.Day - startDate.Day;
            if (startDate.Date > _nextPay.Date)
            {
                _workedDays = 0;
            }
        }

        return _workedDays;
    }

    async Task GetFirstProjectAgreementDate()
    {
        _firstProjectAgreement.ProjectName = ContextService.GetProjectsContext();
        _firstProjectAgreement.EmployerEmail = email;
        _firstProjectAgreement = await AgreementService.GetFirstProjectAgreement(_firstProjectAgreement );
        if(_firstProjectAgreement == null)
        {
            _firstProjectAgreement  =  new Agreement("No tiene contratos todavía","","",DateTime.Now,"",0,DateTime.Now,0,"");
        }
        _projectInfo = await ProjectService.GetProject(email,  ContextService.GetProjectsContext());
        if(_projectInfo == null)
        {
            _projectInfo =  new Project("","","",0.0,0,"",1);
        }

        _nextPay = (DateTime) _firstProjectAgreement .ContractStartDate;
    }

    public void GetNextPay()
    {
        switch (_projectInfo.PaymentInterval)
        {
            case "Quincenal": _daysInterval = 15.0;
                break;
            case "Mensual": _daysInterval = 30.0;
                break;

        }

        _nextPay = _nextPay.AddDays(_daysInterval); 
    }

    private bool FilterFunc1(EmployeeAgreement element) => FilterFunc(element, searchString1);

    private bool FilterFunc(EmployeeAgreement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void PageChanged(int i)
    {
        _mudTable.NavigateTo(i - 1);
    }

    private string costFormat(double cost)
    {
        string costo = string.Format("{0:N}", cost);
        return costo;
    }

    private async Task RegisterPayment()
    {
        if (_selectedItems1.Length() > 0)
        {
            foreach (var element in _selectedItems1)
            {
                double benefits = await GetEmployeeBenefits(element.EmployeeEmail);
                double mountToPay = element.MountToPay - benefits;
                Payment _payment = new Payment(element.EmployeeEmail, _projectInfo.EmployerEmail, _projectInfo.ProjectName, mountToPay, (DateTime)_firstProjectAgreement.ContractStartDate, _nextPay);
                await PaymentService.AddPayment(_payment);
            }
            Snackbar.Add("Pagos aprobados", Severity.Success);
        }
        else
        {
            Snackbar.Add("Por favor seleccione los pagos a aprobar", Severity.Warning);
        }
    }
}
