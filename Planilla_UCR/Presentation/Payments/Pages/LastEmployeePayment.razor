@using Application.Payments
@using Application.ContextMenu
@using Domain.Payments.Entities
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.Subscriptions
@using Domain.People.Entities
@using Domain.Subscriptions.Entities
@using Application.LegalDeductions
@using Domain.LegalDeductions.Entities
@using Application.Subscribes
@using Domain.Subscribes.Entities
@using System.Globalization
@using Presentation.Payments.Models
@using Application.People
@using Application.TaxCalculator

@inject IPaymentService PaymentService
@inject IContextMenuService ContextMenuService
@inject IAgreementService AgreementService
@inject ILegalDeductionService LegalDeductionService
@inject IPersonService PersonService
@inject ISubscribeService SubscribeService
@inject NavigationManager nav
@inject ISubscriptionService SuscriptionService
@inject ITaxCalculatorService TaxCalculatorService
@page "/Last_Pay/{email}/{projectName}"

@if(_loading) 
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudText>
       
    </MudPaper>
} else 
{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Proyectos", href: $"/Projects/{email}"),
            new BreadcrumbItem(@projectName, href: $"/Projects/{email}/{ContextMenuService.GetEmployerEmailContext()}/{projectName}"),
        new BreadcrumbItem("Último pago", href: null, disabled: true)
    }; 
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
    </MudPaper>
    if (!_empty)
    {
        <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                @foreach (var h in headings)
                {
                    <th>@h</th> 
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in rows)
            {
                <tr>
                    @foreach (var x in row.Split("#"))
                    {
                        <td>@x</td> 
                    }
                </tr>
            }
        </tbody>
        </MudSimpleTable>

        <br />
        <br />
        if (_payTaxes)
        {
            <MudTable @ref="@_tableLegalDeductions" Items="@_legalDeductions" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                    <ToolBarContent>
                            <MudText Align="Align.Center" Typo="Typo.h6">Deducciones legales : </MudText>
                            <MudSpacer />
                    </ToolBarContent> 
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Porcentaje</MudTh>
                        <MudTh>Monto</MudTh>
                    </HeaderContent>
                     

                    <RowTemplate>
                            <MudTd DataLabel="Nombre">@context.DeductionName</MudTd>
                            <MudTd DataLabel="Pocentaje"> @TaxCalculatorService.GetTaxPercentage(context.DeductionName, _lastPay.GrossSalary) % </MudTd>
                            <MudTd DataLabel="Monto"> @_cultureCR.NumberFormat.CurrencySymbol @CostFormat(TaxCalculatorService.GetTaxAmount(context.DeductionName, _lastPay.GrossSalary))</MudTd>
                    </RowTemplate>
            </MudTable>
            <br />
            <br />

            <MudTable @ref="@_tableDeductions" Items="@_deductions" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                <ToolBarContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Deducciones voluntarias:</MudText>
                        <MudSpacer /> 
                </ToolBarContent> 
                <HeaderContent>
                    <MudTh>Nombre</MudTh>
                    <MudTh>Costo</MudTh>
                </HeaderContent>

                <RowTemplate>
                        <MudTd DataLabel="Nombre">@context.SubscriptionName</MudTd>
                        <MudTd DataLabel="Costo">@_cultureCR.NumberFormat.CurrencySymbol @CostFormat(context.Cost)</MudTd>
                </RowTemplate>
            </MudTable>
        }
    }else
    {
        <MudText Align="Align.Center" Typo="Typo.h6">
            No existen pagos para este proyecto
        </MudText>
    }
}


@code {
    [Parameter]
    public string email { get; set; }
    [Parameter]
    public string projectName { get; set; }

    // Tables
    string[] headings = { "Datos del funcionario", "Datos de contrato", "Detalles de pago"};
    IList<string> rows = new List<string>();
    private MudTable<Subscription> _tableDeductions;
    private IList<Subscription> _deductions = new List<Subscription>();
    private MudTable<LegalDeduction> _tableLegalDeductions;
    private IEnumerable<LegalDeduction> _legalDeductions = new List<LegalDeduction>();
    private PaymentCalculator _paymentCalculator = new PaymentCalculator();

    // Page control
    private CultureInfo _cultureCR = CultureInfo.GetCultureInfo("es-CR");
    private bool _loading = true;
    private bool _empty = true;
    private bool _payTaxes = false;

    // Payment data 
    private Payment _lastPay;
    private Agreement _agreement;

    protected override async Task OnParametersSetAsync()
    {
        _lastPay = await PaymentService.GetEmployeeLastPayment(email, ContextMenuService.GetEmployerEmailContext(), projectName);
        if (_lastPay != null)
        {
            await UpdatePayTaxes();
            double netSalary = await GetNetSalary();
            Person employer = await PersonService.GetPerson(_lastPay.EmployerEmail);
            rows.Add(@"Empleador: "+employer.Name +" "+employer.LastName1 +" "+employer.LastName2  +"#"+"Tipo de contrato: "+_agreement.ContractType+"#"+"Desde: "+_lastPay.StartDate.ToShortDateString() +" Hasta: "+ _lastPay.EndDate.ToShortDateString());
            rows.Add( @"Proyecto: "+_lastPay.ProjectName +"#"+" "+"#"+"Salario bruto: "+ _cultureCR.NumberFormat.CurrencySymbol+ CostFormat(_lastPay.GrossSalary));
            rows.Add( @" "+"#"+" "+"#"+"Salario neto: "+_cultureCR.NumberFormat.CurrencySymbol+ CostFormat(netSalary));
            _empty = false;
        }
        _loading = false;
    }

    private async Task<double> GetNetSalary()
    {
        double netSalary = _lastPay.GrossSalary;
        Subscribe searchSubscribe= new Subscribe(email, _lastPay.EmployerEmail, projectName, "", 0.0, _lastPay.StartDate, _lastPay.EndDate);
        IList<Subscription> subscriptions = (await SubscribeService.GetSubscriptionCostsByDate(searchSubscribe)).ToList();
        _legalDeductions = await LegalDeductionService.GetAllAsync();
        foreach (var item in _legalDeductions)
        {
            netSalary -= TaxCalculatorService.GetTaxAmount(item.DeductionName, _lastPay.GrossSalary);
        }
        IList<Subscription> _deductionsNotPaid = new List<Subscription>();
        _deductionsNotPaid = _paymentCalculator.ApplyDeductions(netSalary, subscriptions.Where(e => e.TypeSubscription == 0).ToList());
        subscriptions = subscriptions.Except(_deductionsNotPaid).ToList();
        netSalary -= _paymentCalculator.DeductionsCost(subscriptions.Where(e=> e.TypeSubscription == 0).ToList());

        return netSalary;
    }

    private async Task UpdatePayTaxes()
    {
        Agreement toSearchagreement = new Agreement(email, _lastPay.EmployerEmail, projectName, null, "", 0, null, 1, "");
        _agreement = await AgreementService.GetContractee(toSearchagreement);
        if (_agreement.ContractType.Equals("Servicios profesionales"))
        {
            _payTaxes = false;
        }
        else
        {
            _payTaxes = true;
        }
    }

    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }
}