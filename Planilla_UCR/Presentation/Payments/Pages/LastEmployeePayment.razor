@using Application.Payments
@using Application.ContextMenu
@using Domain.Payments.Entities
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Application.LegalDeductions
@using Domain.LegalDeductions.Entities
@using Application.Subscribes
@using Domain.Subscribes.Entities

@inject IPaymentService PaymentService
@inject IContextMenuService ContextMenuService
@inject IAgreementService AgreementService
@inject ILegalDeductionService LegalDeductionService
@inject ISubscribeService SubscribeService
@inject NavigationManager nav
@inject ISubscriptionService SuscriptionService
@page "/Last_Pay/{email}"

@if(_loading) {
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudText>
       
    </MudPaper>
}else{
    @if (!_loading)
    {
        List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Proyectos", href: $"/Projects/{email}"),
             new BreadcrumbItem(@projectName, href: $"/Projects/{email}/{ projectName}/Configurations"),
            new BreadcrumbItem("Último pago", href: null, disabled: true)
        }; 
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
        </MudPaper>
        if (!empty)
        {
            <MudText Align="Align.Left" Typo="Typo.h6"> Información general  </MudText>
            <MudText Align="Align.Left" Typo="Typo.body1">Empleador: @lastPay.EmployerEmail  </MudText>
            <MudText Align="Align.Left" Typo="Typo.body1">Proyectos: @lastPay.ProjectName  </MudText>
            <MudText Align="Align.Left" Typo="Typo.body1">Desde: @lastPay.StartDate.ToShortDateString() Hasta: @lastPay.EndDate.ToShortDateString()  </MudText>
            <MudText Align="Align.Left" Typo="Typo.body1">Salario bruto: @lastPay.GrossSalary </MudText>

            <br />
            <MudText Align="Align.Left" Typo="Typo.h6"> Información de contrato:  </MudText>
            <MudText Align="Align.Left" Typo="Typo.body1"> Tipo de contrato: @agreement.ContractType  </MudText>
            <MudText Align="Align.Left" Typo="Typo.body1"> Monto por horas: @agreement.MountPerHour  </MudText>
            <br />

                <MudTable @ref="@_table" Items="@deductions" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<Subscribe,bool>(FilterFunc1)">
                    <ToolBarContent>
                            <MudText Align="Align.Center" Typo="Typo.h6">Deducciones aaaplicadas:</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent> 
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Costo</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                         <MudTd DataLabel="Nombre">@context.SubscriptionName</MudTd>
                         <MudTd DataLabel="Costo">@context.Cost</MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
                </MudTable>
                <br />

              @*  <MudTable @ref="@_table" Items="@benefits" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<Subscription,bool>(FilterFunc1)">
                    <ToolBarContent>
                            <MudText Align="Align.Center" Typo="Typo.h6">Beneficios aplicados:</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent> 
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Costo</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                         <MudTd DataLabel="Nombre">@context.SubscriptionName</MudTd>
                         <MudTd DataLabel="Costo">@context.Cost</MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
                </MudTable>*@

@*                 <br />
                <MudTable @ref="@_table2" Items="@legalDeductions" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<LegalDeduction,bool>(FilterFunc2)">
                    <ToolBarContent>
                            <MudText Align="Align.Center" Typo="Typo.h6">Deducciones legales:</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent> 
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Costo</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                         <MudTd DataLabel="Nombre">@context.DeductionName</MudTd>
                         <MudTd DataLabel="Costo">@context.Cost</MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
                </MudTable>
*@
                 <br />
                <MudTable @ref="@_table3" Items="@subscriptions" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<PaymentContainsSubscription,bool>(FilterFunc3)">
                    <ToolBarContent>
                            <MudText Align="Align.Center" Typo="Typo.h6">Suscripciones del pago: </MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent> 
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                         <MudTd DataLabel="Nombre">@context.SubscriptionName</MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                </PagerContent>
                </MudTable>
        }else
        {
           
        }
    }


    @code {
    private bool _hidePosition;
    private bool _loading = true;
    private bool empty = true;
    string searchString1 = "";
    private IEnumerable<Subscribe> deductions = new List<Subscribe>();
    private IEnumerable<Subscription> benefits = new List<Subscription>();
    private IEnumerable<LegalDeduction> legalDeductions = new List<LegalDeduction>();

    private MudTable<Subscribe> _table;
    private MudTable<LegalDeduction> _table2;

    private MudTable<PaymentContainsSubscription> _table3;
    private IEnumerable<PaymentContainsSubscription> subscriptions = new List<PaymentContainsSubscription>();

    Payment lastPay;
    Agreement agreement;

    [Parameter]
    public string email { get; set; }

    public string projectName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        projectName = ContextMenuService.GetProjectsContext();
        lastPay = await PaymentService.GetEmployeeLastPayment(email, "leonel@ucr.ac.cr", projectName);
        Agreement toSearchagreement = new Agreement(email, lastPay.EmployerEmail, projectName, null, "", 0, null);
        agreement = await AgreementService.GetContractee(toSearchagreement);
        //deductions = await SuscriptionService.GetDeductionsByProject(lastPay.EmployerEmail, projectName);
        benefits = await SuscriptionService.GetBenefitsByProject(lastPay.EmployerEmail, projectName);
        legalDeductions = await LegalDeductionService.GetAllAsync();

        subscriptions = await PaymentService.GetPaymentSubscriptions(lastPay);

        Subscribe searchSubscribe= new Subscribe(email, lastPay.EmployerEmail, projectName, "", 0.0, lastPay.StartDate, lastPay.EndDate);
        deductions = await SubscribeService.GetSubscriptionCostsByDate(searchSubscribe);

        foreach (var item in subscriptions)
        {
            await  SuscriptionService.GetSubscription(lastPay.EmployerEmail, projectName, item.SubscriptionName);
        }


        if (lastPay == null)
        {
            empty = true;
        }
        else
        {
            empty = false;
        }
        _loading = false;
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(Subscribe element) => FilterFunc(element, searchString1);
    private bool FilterFunc2(LegalDeduction element2) => FilterFunc2(element2, searchString1);
    private bool FilterFunc3(PaymentContainsSubscription element3) => FilterFunc3(element3, searchString1);

    private bool FilterFunc(Subscribe element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SubscriptionName.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
        return true;
        return false;
    }

    private bool FilterFunc2(LegalDeduction element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.DeductionName.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
        return true;
        return false;
    }

    private bool FilterFunc3(PaymentContainsSubscription element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SubscriptionName.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
        return true;
        return false;
    }
}
}
