@page "/persons"
@using Domain.Persons.DTOs
@using Application.Persons
@using Domain.Persons.Entities
@using Presentation.Core.Components
@inject ISnackbar Snackbar
@inject IPersonService PersonService

@if (_created)
{
    ShowSuccesNotification("Cuenta creada");
}

 <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
<MudGrid>
    @*Text fields *@
    <MudItem xs="12" sm="8">
        <MudPaper  Height="220px" Width="90%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">Información personal</MudText>

            <MudGrid>
                @*Small fields *@
                <MudItem xs="6">
                    <MudTextField @bind-Value="personInfo.Name" Label="Nombre" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="personInfo.Email" Label="Email" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="personInfo.LastName1" Label="Primer Apellido" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="personInfo.LastName2" Label="Segundo Apellido" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                 <MudItem xs="6">
                    <MudTextField @bind-Value="personInfo.PhoneNumber" Label="Telefono" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="personInfo.Ssn" Label="Cedula" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                @*Large fields *@
                <MudItem xs="12">
                    <MudTextField @bind-Value="personInfo.Adress" Label="Dirección" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="personInfo.BankAccount" Label="Cuenta Bancaria" Variant="Variant.Outlined"></MudTextField>
                <MudDivider />
                </MudItem>
               

                @*Create buton *@
                <MudItem xs="12" sm="6" md="4">
                    <MudButton Disabled="@_saving" OnClick="SavePersonInfo" Variant="Variant.Filled" Color="Color.Secondary">
                        @if (_saving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Procesando</MudText>
                        }
                        else
                        {
                            <MudText>Crear</MudText>
                        }
                    </MudButton>
                </MudItem>

                 @*Clear buton *@
                <MudItem xs="12" sm="6" md="4">
                    <MudButton Disabled="@_cleanning" OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Error">
                        @if (_cleanning)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">limpiando</MudText>
                        }
                        else
                        {
                            <MudText>Limpiar</MudText>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    @*File uploader *@
    <MudItem xs="3">
         @*<MudText Align="Align.Center" Typo="Typo.h6">Foto de perfil</MudText>*@
        <FileUploader>
        </FileUploader>   
    </MudItem>
</MudGrid>

@code{
    Person personInfo = new Person("", "", "", "", Int32.Parse("0"), "", "", "");


    public string personalInfo { get; set; }  = "                      Información personal";
    public string  profilePhoto { get; set; }  = "            Foto de perfil";
    private bool _isLoading = true;
    private bool _saving = false;
    private bool _cleanning = false;
    bool _created = false;
    bool _validInfo = false;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "#"),
        new BreadcrumbItem("Cuenta", href: "#"),
    };

    async Task SavePersonInfo()
    {
        _validInfo = true;
        _saving = true;
        ValidateName(personInfo);
        ValidateEmail(personInfo);
        ValidateBankAccount(personInfo);
        ValidateSsn(personInfo);
        if (_validInfo)
        {
            await PersonService.CreatePersonAsync(personInfo);
            _saving = false;
            _created = true;
        }
        _saving = false;
    }

    void ShowSuccesNotification(string message)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Add($"{message}", Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void ShowErrorNotification(string message)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Add($"{message}", Severity.Error, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        personInfo.Name = "";
        personInfo.Email = "";
        personInfo.LastName1 = "";
        personInfo.LastName2 = "";
        personInfo.Adress = "";
        personInfo.BankAccount = "";
        personInfo.PhoneNumber = "";
        personInfo.Ssn = 0;
    }

    void ValidateName(Person personInfo)
    {
        if (personInfo.Name == "")
        {
            personInfo.Name = "*Campo Requerido";
            _validInfo = false;
        }
        if (personInfo.Name == "*Campo Requerido")
        {
            _validInfo = false;
        }
    }

    void ValidateEmail(Person personInfo)
    {
        if (personInfo.Email == "")
        {
            personInfo.Email = "* Campo Requerido";
            _validInfo = false;
        }
        if (personInfo.Email == "* Campo Requerido")
        {
            _validInfo = false;
        }
    }

    void ValidateBankAccount(Person personInfo)
    {
        if (personInfo.BankAccount == "")
        {
            personInfo.BankAccount = "* Campo Requerido";
            _validInfo = false;
        }
        if (personInfo.BankAccount == "* Campo Requerido")
        {
            _validInfo = false;
        }
    }

    void ValidateSsn(Person personInfo)
    {
        if (personInfo.Ssn == 0)
        {
            ShowErrorNotification("Número de cédula incorrecto");
            _validInfo = false;
        }
    }
}
