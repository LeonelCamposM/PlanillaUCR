@page "/persons"
@using Domain.Persons.DTOs
@using Application.Persons
@using Domain.Persons.Entities
@using Presentation.Core.Components
@inject ISnackbar Snackbar
@inject IPersonService PersonService



@if (_created)
{
    ChangeVariant("Cuenta creada", Variant.Filled);
}

<MudSnackbarProvider />
 <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
<MudGrid>
    @*Text fields *@
    <MudItem xs="12" sm="8">
        <MudPaper  Height="220px" Width="90%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">Información personal</MudText>

            <MudGrid>
                @*Small fields *@
             
                <MudItem xs="6">
                    <MudTextField @bind-Value="name" Label="Nombre" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="fname" Label="Primer Apellido" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="sname" Label="Segundo Apellido" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                 <MudItem xs="6">
                    <MudTextField @bind-Value="phone" Label="Telefono" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="id" Label="Cedula" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                @*Large fields *@
                <MudItem xs="12">
                    <MudTextField @bind-Value="direction" Label="Dirección" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="bankAccount" Label="Cuenta Bancaria" Variant="Variant.Outlined"></MudTextField>
                <MudDivider />
                </MudItem>
               

                @*Create buton *@
                <MudItem xs="12" sm="6" md="4">
                    <MudButton Disabled="@_processing" OnClick="ProcessSomething" Variant="Variant.Filled" Color="Color.Secondary">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Procesando</MudText>
                        }
                        else
                        {
                            <MudText>Crear</MudText>
                        }
                    </MudButton>
                </MudItem>

                 @*Clear buton *@
                <MudItem xs="12" sm="6" md="4">
                    <MudButton Disabled="@_processing" OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Error">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">limpiando</MudText>
                        }
                        else
                        {
                            <MudText>Limpiar</MudText>
                        }
                    </MudButton>
                </MudItem>
                

            </MudGrid>

        </MudPaper>
    </MudItem>

    @*File uploader *@
    <MudItem xs="3">
         @*<MudText Align="Align.Center" Typo="Typo.h6">Foto de perfil</MudText>*@
        <FileUploader>
        </FileUploader>   
    </MudItem>
</MudGrid>

@code{
    public string name { get; set; }
    public string email { get; set; }
    public string id { get; set; }
    public string fname { get; set; }
    public string sname { get; set; }
    public string bankAccount { get; set; }
    public string direction { get; set; }
    public string phone { get; set; }



    public string personalInfo { get; set; }  = "                      Información personal";
    public string  profilePhoto { get; set; }  = "            Foto de perfil";
    private bool _isLoading = true;
    private bool _processing = false;
    bool _created = false;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "#"),
        new BreadcrumbItem("Cuenta", href: "#"),
    };

    async Task ProcessSomething()
    {
        _processing = true;
        Person personInfo = new Person(email, name, fname, sname, Int32.Parse(id), bankAccount, direction, phone);
        await PersonService.CreatePersonAsync(personInfo);
        _processing = false;
        _created = true;
    }

    void ChangeVariant(string message, Variant variant)
    {
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($"{message}", Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        name = "";
        email = "";
        id = "";
        fname = "";
        sname = "";
        bankAccount = "";
        direction = "";
        phone = "";
    }
}
