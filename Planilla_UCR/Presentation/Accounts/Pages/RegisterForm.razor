@page "/Register_Form"
@using Domain.People.Entities
@using Domain.Employees.Entities 
@using Domain.Employees.DTOs
@using Application.Accounts
@using Application.People
@using Application.Employees
@using Domain.Accounts.Entities
@using Domain.Accounts.DTOs
@using Presentation.Shared.Models
@using Presentation.Core.Components
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Presentation.Core.Layout.Visitor

@layout VisitorMainLayout
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IPersonService PersonService
@inject IAccountService AccountService
@inject IEmployeeService EmployeeService


@*Navigation footprint *@
@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "#"),
        new BreadcrumbItem("Cuenta", href: "#"),
    };
}
 <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudGrid>
    <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudSpacer></MudSpacer>
            <MudText Align="Align.Center" Typo="Typo.h6">Información personal</MudText>
            <MudForm @ref="form">
                    <MudGrid>
                    @*Small fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Name" Label="Nombre" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Email" Label="Email" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.LastName1" Label="Primer Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.LastName2" Label="Segundo Apellido" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                     <MudItem xs="2"></MudItem>
                     <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.PhoneNumber" Label="Teléfono" Variant="Variant.Outlined" ></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="personInfo.Ssn" Label="Cedula" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    </MudItem>
                      <MudItem xs="2"></MudItem>

                    @*Large fields *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.Adress" Label="Dirección" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudTextField @bind-Value="personInfo.BankAccount" Label="Cuenta Bancaria" Variant="Variant.Outlined" Required="true" RequiredError="Campo requerido"></MudTextField>
                    <MudDivider />
                    </MudItem>
                    <MudItem xs="2"></MudItem>
                   
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="4">
                       <MudTextField @bind-Value="accountData.UserPassword" Label="Contraseña" Variant="Variant.Outlined" @ref="pwField1" InputType="InputType.Password"  Required="true" RequiredError="Campo requerido" 
                            Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" ></MudTextField>
                   </MudItem>
                    
                   <MudItem xs="4">
                       <MudTextField T="string" Label="Confirmación de Contraseña" Variant="Variant.Outlined" InputType="InputType.Password"  Validation="@(new Func<string, string>(PasswordMatch))" Required="true" RequiredError="Campo requerido" ></MudTextField>
                    </MudItem>
                    <MudItem xs="2"></MudItem>

                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudSelect  @bind-Value="Rol" Label="Rol">
                        <MudSelectItem Value="@("RolEmployee")">Empleado</MudSelectItem>
                        <MudSelectItem Value="@("RolEmployer")">Empleador</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                    <MudCheckBox @bind-Checked="@SendEmail" Label="Enviar email de confirmación" Color="Color.Secondary" Variant="Variant.Outlined"></MudCheckBox>
                    </MudItem>
                    <MudItem xs="2"></MudItem>
                    <MudSpacer></MudSpacer>
                    @*Create buton *@
                    <MudItem xs="2"></MudItem>
                    <MudItem xs="8">
                        <MudButton Disabled="@snackHandler._saving" OnClick="SavePersonInfo" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (snackHandler._saving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                <MudText>Crear</MudText>
                            }
                        </MudButton>
                    <MudButton Disabled="true"> </MudButton>

                     @*Clear buton *@
                        <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                                <MudText>Limpiar</MudText>
                        </MudButton>
                    </MudItem>
                     <MudItem xs="2"></MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>

    @*File uploader *@
    <MudItem xs="3">
    </MudItem>

</MudGrid>

@code {
    Person personInfo = new Person("", "", "", "", Int32.Parse("0"), "", "", "");
    AccountsDTO accountData = new AccountsDTO("","");
    MudTextField<string> pwField1;
    SnackHandler snackHandler = new SnackHandler();
    MudForm form;
    String Rol;
    public bool SendEmail { get; set; } = false;


    async Task SavePersonInfo()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid && ValidateInfo(personInfo)){
            await PersonService.CreatePersonAsync(personInfo);
            if (Rol.Equals("RolEmployee")){
                await EmployeeService.CreateEmployeeAsync(personInfo.Email);
            }
            else{
                //await EmployerService.CreateEmployerAsync(personInfo.Email);
            }
            if (SendEmail == true) {
                await AccountService.SendEmail("Ha registrado su cuenta correctamente, bienvenido a Planilla_UCR",personInfo.Email);
            }
            accountData.Email = personInfo.Email;
            await AccountService.InsertAccountData(accountData);
            snackHandler._saving = false;
            ShowSnackNotification("Persona "+personInfo.Name+" creado", Severity.Success);
            await AccountService.SetAuthenticationState(accountData,1);
            nav.NavigateTo($"/Projects/{accountData.Email}");
        }
        snackHandler._saving = false;
    }

    bool ValidateSsn(Person personInfo)
    {
        bool valid = true;
        if (personInfo.Ssn == 0 || personInfo.Ssn < 0)
        {
            ShowSnackNotification("Número de cédula incorrecta", Severity.Error);
            valid = false;
        }
        return valid;
    }

    bool ValidateEmail(Person personInfo)
    {
        bool valid = true;

        valid = personInfo.Email.Contains('@');
        if (!valid)
        {
            ShowSnackNotification("El email debe contener un @", Severity.Error);
        }
        return valid;
    }

    bool ValidateInfo(Person personInfo)
    {
        bool ssn = ValidateSsn(personInfo);
        bool email = ValidateEmail(personInfo);
        return ssn && email;
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Contraseña es requerida!";
            yield break;
        }
        if (pw.Length < 8)
        {
            yield return "La contraseña debe tener al menos 8 caracteres";
        }
        if (!Regex.IsMatch(pw, @"[A-Z]"))
        {
            yield return "Debe contener al menos una letra mayúscula";
        }
        if (!Regex.IsMatch(pw, @"[a-z]"))
        {
            yield return "Debe contener al menos una letra minúscula";
        }

        if (!Regex.IsMatch(pw, @"[0-9]"))
        {
            yield return "Debe contener al menos un dígito";
        }
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Contraseñas no coinciden";
        return null;
    }


    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        personInfo.Name = "";
        personInfo.Email = "";
        personInfo.LastName1 = "";
        personInfo.LastName2 = "";
        personInfo.Adress = "";
        personInfo.BankAccount = "";
        personInfo.PhoneNumber = "";
        personInfo.Ssn = 0;
        accountData.UserPassword = "";
    }
}
