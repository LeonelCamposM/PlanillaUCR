@page "/Loggin"
@using Domain.Accounts.DTOs
@using Application.Accounts
@using Domain.Accounts.Entities
@using Presentation.Core.Components
@using Presentation.Accounts.Models
@using Application.Persons
@using Domain.Persons.Entities
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IPersonService PersonService
@inject IAccountService AccountService
@inject IAccountService AccountService

<MudGrid>
 <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudSpacer></MudSpacer>
            <MudText Align="Align.Center" Typo="Typo.h6">Inicio</MudText>
            <MudForm @ref="form">
            <MudGrid>
                <MudItem xs="2"></MudItem>
                <MudItem xs="8">
                    <MudTextField @bind-Value="accountData.Email" Label="Correo electrónico" Required="true" RequiredError="Campo requerido" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="2"></MudItem>
                <MudItem xs="2"></MudItem>
                <MudItem xs="8">
                    <MudTextField @bind-Value="accountData.UserPassword" Label="Contraseña" Required="true" RequiredError="Campo requerido"  Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="2"></MudItem>

                @*Create buton *@
                <MudItem xs="2"></MudItem>
                     <MudItem xs="4">
                        <MudButton Disabled="@snackHandler._saving" OnClick="GoToCreateAccount" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (snackHandler._saving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                <MudText>Crear Cuenta</MudText>
                            }
                        </MudButton>
                     </MudItem>
                
                <MudItem xs="4">
                <MudItem xs="2"></MudItem><MudButton Disabled="@snackHandler._saving" OnClick="ValidateRegisterAccount" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (snackHandler._saving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                <MudText>Ingresar</MudText>
                            }
                        </MudButton>
                 </MudItem>
            </MudGrid>
           </MudForm>
        </MudPaper>
    </MudItem>
    @*File uploader *@
    <MudItem xs="3">
        @*FALTA PONER EL REGISTERFORM *@
    </MudItem>
</MudGrid>

@code{
    Account accountData = new Account("","");
    public string email { get; set; }
    public string password { get; set; }
    MudForm form;
    SnackHandler snackHandler = new SnackHandler();
    private bool _isLoading = true;
    private bool _processing = false;


   

    async Task ValidateRegisterAccount()
    {
        //FALTA VALIDAR
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid)
        {
            //CAMBIAR AL QUE SI VALIDA LA INFO 
            await AccountService.InsertAccountData(accountData);
            ShowSnackNotification("Usuario ingresado", Severity.Success);
        }
       snackHandler._saving = false;
    }


    public bool async Task ValidateEmail(Account accountData)
    {
        
        IEnumerable<Account> emailChecked = await AccountService.CheckEmail(accountData);
        bool valid = true;
        if (emailChecked.Length() != 0)
        {
            valid=true;
        }
         else {
             valid=false;
        }   
        return valid;
    }

    
     private void GoToCreateAccount()
    {
        nav.NavigateTo("/Register_Form");
    }

     /*
      private void GoToProjects()
        {
        nav.NavigateTo("/Register_Form");
    }
    */

     void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }



}