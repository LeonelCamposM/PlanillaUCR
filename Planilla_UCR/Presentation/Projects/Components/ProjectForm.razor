@page "/CreateProject"
@using Domain.Projects.DTOs
@using Domain.Projects.Entities
@using Application.Projects
@using Presentation.Projects.Models
@using Presentation.Core.Components

@inject IProjectService ProjectService
@inject ISnackbar Snackbar

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudGrid>
    @*Text fields *@
    <MudItem xs="12" sm="8">
        <MudPaper  Height="250px" Width="90%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">Crear Proyecto</MudText>
            <MudForm @ref="form">
            <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="ProjectInfo.ProjectName" 
                Label="Nombre del Proyecto" Variant="Variant.Outlined"  
                Required="true" RequiredError="Campo requerido"></MudTextField>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="ProjectInfo.EmployerEmail" 
                Label="Email del Empleador" Variant="Variant.Outlined"
                Required="true" RequiredError="Campo requerido"></MudTextField>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="ProjectInfo.ProjectDescription" 
                Label="Descripción del Proyecto" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            
            <MudItem xs="12">
                <MudSelect  @bind-Value="ProjectInfo.PaymentInterval" Label="Intervalo de pago">
                    <MudSelectItem Value="@("Quincenal")">Pago Quincenal</MudSelectItem>
                    <MudSelectItem Value="@("Mensual")">Pago Mensual</MudSelectItem>
                    <MudSelectItem Value="@("Semanal")">Pago Semanal</MudSelectItem>
                    <MudSelectItem Value="@("Bisemanal")">Pago Bisemanal</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="ProjectInfo.MaximumAmountForBenefits"  
                Label="Monto máximo de beneficios" Variant="Variant.Outlined"></MudTextField>
            </MudItem>

            <MudItem xs="6">
                <MudTextField @bind-Value="ProjectInfo.MaximumBenefitAmount"  
                Label="Cantidad máxima de beneficios" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
           
            <MudItem xs="12" sm="6" md="4">
                <MudButton Disabled="@snackHandler._saving" OnClick="CreateProject" 
                Variant="Variant.Filled" Color="Color.Secondary">
                    @if (snackHandler._saving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Creando</MudText>
                    }
                    else
                    {
                        <MudText>Crear</MudText>
                    }
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                        <MudText>Cancelar</MudText>
                </MudButton>
            </MudItem>

            </MudGrid>
        </MudForm>
        </MudPaper>
    </MudItem>
    @*File uploader *@
    <MudItem xs="3">
            <FileUploader>
            </FileUploader>   
    </MudItem>
</MudGrid>


@code{
    public string project { get; set; }
    private bool _isLoading = true;
    private bool _processing = false;

    SnackHandler snackHandler = new SnackHandler();
    Project ProjectInfo = new Project("","","",0,0,"");
    MudForm form;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: ""),
        new BreadcrumbItem("Proyectos", href: "project"),
        new BreadcrumbItem("Crear proyecto nuevo", href: "newproject")
    };


    async Task CreateProject()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid)
        {
            await ProjectService.CreateProjectAsync(ProjectInfo);
            snackHandler._saving = false;
            ShowSnackNotification(ProjectInfo.ProjectName+" creado", Severity.Success);
            CleanForm();
        }
       
        snackHandler._saving = false;
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }


    void CleanForm()
    {
        ProjectInfo.ProjectName = "";
        ProjectInfo.EmployerEmail = "";
        ProjectInfo.ProjectDescription = "";
        ProjectInfo.MaximumBenefitAmount= 0;
        ProjectInfo.MaximumAmountForBenefits = 0;
        ProjectInfo.PaymentInterval = "";
    }
     
}