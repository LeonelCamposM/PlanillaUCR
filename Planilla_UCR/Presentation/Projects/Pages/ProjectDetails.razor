@page "/Projects/Details/{EmployerEmail}/{ProjectName}"
@using Domain.Projects.DTOs
@using Application.Projects
@using Domain.Projects.Entities
@using Presentation.Core.Components
@inject NavigationManager nav
@inject IProjectService ProjectService

@if (_loading)
{
    <h4 class="text-danger">Cargando Proyectos</h4>
}
else
{
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudItem xs="2"></MudItem>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">Crear Proyecto</MudButton>
        <MudItem xs="2"></MudItem>
    </MudToolBar>

    <MudGrid>   
        <MudItem xs="4"></MudItem>
        <MudItem xs="3">
            <MudPaper Elevation="0">
                <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Secondary">@Project.ProjectName</MudText>
            </MudPaper>
            <MudSpacer></MudSpacer>
        </MudItem>

        <MudItem xs="2"></MudItem>
        
        <MudItem xs="1">
            <MudPaper Elevation="0">
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" Align="Align.Right" OnClick="GoToConfigs"/>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="2"></MudItem>
        <MudItem xs="8">
            <MudText Typo="Typo.body1">Descripción</MudText>
            <MudTextField @bind-Value="ReadOnly" Label=@Project.ProjectDescription Variant="Variant.Outlined" ReadOnly="true"/>
        </MudItem>
        <MudItem xs="2"></MudItem>

        <MudItem xs="2"></MudItem>
        <MudItem xs="4">
            <MudText>Intervalo de pago: </MudText>
             <MudTextField @bind-Value="ReadOnly" Label=@Project.PaymentInterval Variant="Variant.Outlined" ReadOnly="true"/>
        </MudItem>

        <MudItem xs="4">
            <MudText>Asignado a:</MudText>
             <MudTextField @bind-Value="ReadOnly" Label=@Project.EmployerEmail Variant="Variant.Outlined" ReadOnly="true"/>
        </MudItem>
        <MudItem xs="2"></MudItem>

        <MudItem xs="2"></MudItem>
        <MudItem xs="4">
            <MudText>Cantidad máxima de beneficios: </MudText>
             <MudTextField @bind-Value="ReadOnly" Label=@MaximumBenefitAmount Variant="Variant.Outlined" ReadOnly="true"/>
            <br/>
        </MudItem>
        <MudItem xs="4">
            <MudText>Monto máximo de beneficios: </MudText>
             <MudTextField @bind-Value="ReadOnly" Label=@MaximumAmountForBenefits Variant="Variant.Outlined" ReadOnly="true"/>
            <br/>
        </MudItem>
    </MudGrid>
        <MudToolBar DisableGutters="true" Class="gap-4">

            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" OnClick="GoToDeductions" Color="Color.Secondary">Deducciones</MudButton>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" OnClick="GoToBenefits" Color="Color.Secondary">Beneficios</MudButton>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" OnClick="GoToEmployees" Color="Color.Secondary">Empleados</MudButton>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" OnClick="GoToMain" Color="Color.Transparent">Volver</MudButton>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>

        </MudToolBar>
}


@code {
    private bool _loading = true;
    public Project Project = new Project("","","",0,0,"");

    [Parameter] public string EmployerEmail { get; set; }
    [Parameter] public string ProjectName { get; set; }
    public string MaximumAmountForBenefits { get; set; }
    public string MaximumBenefitAmount { get; set; }

    public string ReadOnly { get; set; }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: "/Projects/{EmployerEmail}"),
        new BreadcrumbItem("Detalles del proyecto",href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        Project = await ProjectService.GetProject(EmployerEmail, ProjectName);
        MaximumAmountForBenefits = Project.MaximumAmountForBenefits+"";
        MaximumBenefitAmount = Project.MaximumBenefitAmount+"";
        _loading = false;
    }

    private void GoToConfigs()
    {
        nav.NavigateTo($"/Projects/Details/{EmployerEmail}/{ProjectName}/Configurations"); 
    }

    private void GoToMain()
    {
        nav.NavigateTo("/Projects/{EmployerEmail}");
    }

    private void GoToCreate()
    {
        nav.NavigateTo("/Create_Project/{EmployerEmail}");
    }
    private void GoToDeductions()
    {
        nav.NavigateTo($"/Projects/{EmployerEmail}/{ProjectName}/Deductions");
    }
    private void GoToBenefits()
    {
        nav.NavigateTo($"/Projects/{EmployerEmail}/{ProjectName}/Benefit");
    }
    private void GoToEmployees()
    {
        nav.NavigateTo($"/View_Project_Employees/{ProjectName}");
    }
}