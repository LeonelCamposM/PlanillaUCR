@page "/Projects/{employerEmail}/{projectName}/Configurations"
@using Domain.Projects.DTOs
@using Domain.Projects.Entities
@using Application.Projects
@using Presentation.Projects.Models
@using Presentation.Core.Components
@using System.ComponentModel.DataAnnotations
@using Application.ContextMenu

@inject IProjectService ProjectService
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IContextMenuService ContextMenuService


@{
     List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem($"{projectName}", href: $"/Projects/{employerEmail}/{projectName}"),
        new BreadcrumbItem("Configuraciones",  href: null, disabled: true)
    };
}	
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
<MudGrid>
    <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false " Class="border-none pa-4" Elevation="0">
            <MudForm @ref="form">
                <MudText Align="Align.Center" Typo="Typo.h6">@tittle</MudText>
                <MudGrid>

                <MudItem xs="2"> </MudItem>
                <MudItem xs="8">
                    <MudTextField Label="Descripción del Proyecto" Variant="Variant.Outlined"
                    @bind-Value="projectInfo.ProjectDescription"  For="@(() => Limits.Description )"
                    ></MudTextField>
                </MudItem>
                <MudItem xs="2"> </MudItem>
                

                <MudItem xs="2"> </MudItem>
                <MudItem xs="8">
                    <MudSelect typeof="int" @bind-Value="projectInfo.PaymentInterval" Label="Intervalo de pago" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Quincenal")">Pago Quincenal</MudSelectItem>
                        <MudSelectItem Value="@("Mensual")">Pago Mensual</MudSelectItem>
                        <MudSelectItem Value="@("Semanal")">Pago Semanal</MudSelectItem>
                        <MudSelectItem Value="@("Bisemanal")">Pago Bisemanal</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="2"></MudItem>


                <MudItem xs="2"> </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="projectInfo.MaximumAmountForBenefits"Min="0"
                    Required="false" RequiredError="Campo requerido" 
                    Label="Monto máximo de beneficios" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>

                <MudItem xs="4">
                    <MudNumericField @bind-Value="projectInfo.MaximumBenefitAmount" Min="0"
                    Label="Cantidad máxima de beneficios" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>

                <MudItem xs="2"></MudItem>
                <MudItem xs="2"></MudItem>
                <MudItem xs="8">
                    <br />
                    <MudDivider />
                </MudItem>
                <MudItem xs="2"></MudItem>
                <MudItem xs="2"></MudItem>

                @*Create button *@
                <MudItem xs="8"> 
                <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudSpacer></MudSpacer>
                    <MudButton Disabled="@_saving" OnClick="TryToSend" 
                    Variant="Variant.Filled" Color="Color.Primary">
                    @if (_saving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Modificando</MudText>
                    }
                    else
                    {
                        <MudText>Modificar</MudText>
                    }
                    </MudButton>
                    <MudSpacer></MudSpacer>
                   
                    <MudButton OnClick="DeleteProject" Variant="Variant.Filled" Color="Color.Transparent">
                        <MudText>Borrar Proyecto</MudText>
                    </MudButton>
                    <MudSpacer></MudSpacer>

                     <MudSpacer></MudSpacer>
                    <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                        <MudText>Cancelar</MudText>
                    </MudButton>
                    <MudSpacer></MudSpacer>
                </MudToolBar>
                </MudItem>
                <MudItem xs="2"></MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    public string project { get; set; }
    private bool _saving = false;
    public string tittle { get; set; }

    Project projectInfo = new Project("","","",0,0,"");
    public Project projectObject = new Project("","","",0,0,"");
    MudForm form;

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }

    SnackHandler snackHandler = new SnackHandler();


    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true, projectName);
        projectObject = await ProjectService.GetProject(employerEmail, projectName);
        tittle = "Modificar " + projectName;
    }


    private void GoToContractEmployee(String email, string project)
    {
       nav.NavigateTo($"/Hire_Employees/{email}/{project}");
    }


    async Task ModifyProject()
    {
         ShowSnackNotification("Proyecto Modificado correctamente", Severity.Success);

    }

    async Task DeleteProject()
    {

        ShowSnackNotification("Proyecto borrado correctamente", Severity.Success);

    }
    async Task TryToSend()
    {
        await form.Validate();
        if (form.IsValid)
        {
            _saving = true;
            await ModifyProject();
            _saving = false;

        }

    }

    void ShowSnackNotification(string Message, Severity Severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{Message}", Severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }


    void CleanForm()
    {
        projectInfo.ProjectName = "";
        projectInfo.EmployerEmail = "";
        projectInfo.ProjectDescription = "";
        projectInfo.MaximumBenefitAmount= 0;
        projectInfo.MaximumAmountForBenefits = 0;
        projectInfo.PaymentInterval = "";
    }

    LimitsValidationForm Limits = new LimitsValidationForm();


    public class LimitsValidationForm
    {

        [StringLength(500, ErrorMessage = "La descripción es muy grande")]
        public string Description { get; set; }

    }

 
}