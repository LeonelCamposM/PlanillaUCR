@page "/Projects/{personEmail}"
@using Domain.Projects.Entities
@using Domain.Agreements.Entities
@using Domain.People.Entities
@using Domain.AgreementTypes.Entities
@using Application.Projects
@using Application.Agreements
@using Application.People
@using Application.AgreementTypes
@using Presentation.Core.Components
@using Presentation.Projects.Models
@using Application.ContextMenu
@using Presentation.Authentication

@inject NavigationManager nav
@inject ISnackbar Snackbar

@inject IPersonService PersonService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject IAgreementTypeService AgreementTypeService
@inject IContextMenuService ContextMenuService


@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos",  href: null, disabled: true),

    };
}

<AuthorizeView Roles="Employer">
    <Authorized>
       @if (_loading)
        {
                <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                    <MudText Align="Align.Center" Typo="Typo.h6">
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                    </MudText>
            </MudPaper>
        }
        else
        {
            <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
            @if (_emptyProject)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">No hay proyectos asociados al empleador
                </MudText>
                <br>
                <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudButton></MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Primary">
                        <MudText> 
                            Crear nuevo proyecto
                        </MudText> 
                    </MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton></MudButton>
                </MudToolBar>
            }
            else
            {

                <MudTable @ref="_mudTable" Items="@_projectElements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" 
                Loading="@_emptyProject" LoadingProgressColor="Color.Primary" Filter="new Func<Project,bool>(FilterFuncEmployer)">  

                    <ToolBarContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Lista de proyectos</MudText>
                        <MudSpacer></MudSpacer>
                        <MudTextField @bind-Value="_searchString" Placeholder="Buscar proyecto" Adornment="Adornment.Start" 
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                        </MudTextField>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh Style="text-align:justify-all">Nombre</MudTh>
                        <MudTh Style="text-align:justify-all">Descripción</MudTh>
                        <MudTh Style="text-align:justify-all">Borrar</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">
                        <MudTd DataLabel="Nombre" Style="text-align:justify-all">
                            <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/Projects/{@row.EmployerEmail}/{@row.ProjectName}")">
                                @row.ProjectName
                            </MudLink>
                        </MudTd>

                        <MudTd DataLabel="Descripción" Style="text-align:justify-all">@row.ProjectDescription</MudTd>

                        <MudTd Style="text-align:justify-all">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="@(e => GoToDisable(@row.ProjectName))"/>
                        </MudTd>
            
                    </RowTemplate>

                    <PagerContent>
                            <MudPagination SelectedChanged="PageChangedR" 
                                Count="@((_mudTable.GetFilteredItemsCount() + _mudTable.RowsPerPage - 1) / _mudTable.RowsPerPage)" 
                                Color="Color.Primary" Class="pa-4"/>
                    </PagerContent>
                </MudTable>
                <br>
                <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Primary">Crear proyecto</MudButton>

                
                <MudDialog @bind-IsVisible="_visible" Options="dialogOptions">
                    <TitleContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="@Color.Primary" Class="mr-2"/> 
                                Este proyecto tiene empleados contratados, si confirma esta acción se procederá a terminar de forma 
                                temprana el contrato con todos sus empleados y la fecha de fin será el día de hoy. 
                        </MudText>
                    </TitleContent>
                    <DialogContent>
                        <MudItem xs="12" Class="d-flex justify-center align-center">
                            <MudTextField @bind-Value="_agreementMessage" Label="Contratos activos con los siguientes empleados:" 
                                Lines= "4" Variant="Variant.Outlined" ReadOnly ="true">
                            </MudTextField>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-center align-center">
                            <MudTextField Required="true" RequiredError="Incluya una justificación" @bind-Value="_justification" 
                            Label="Si desea terminar los contratos asociados debe introducir una justificación:" Lines= "6" 
                            Variant="Variant.Outlined">
                        </MudTextField>
                        </MudItem>
                    </DialogContent>
                    <DialogActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmDisableProject" Class="px-10">
                            Confirmar borrado de proyecto
                        </MudButton>

                        <MudButton Variant="Variant.Filled" Color="Color.Transparent" OnClick="CancelAction" Class="px-10">Cancelar</MudButton>
                    </DialogActions>
                </MudDialog>
            }    
    
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>


<AuthorizeView Roles="Employee">
    <Authorized>
        @if (_loading)
        {
            _isEmployer = false;
            <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                    <MudText Align="Align.Center" Typo="Typo.h6">
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                    </MudText>
            </MudPaper>
        }
        else
        {
            <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
            @if (_emptyAgreement)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">No hay proyectos asociados al empleado
                </MudText>
            }
            else
            {

                <MudTable @ref="@_table" Items="@_joinTable" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_emptyAgreement" LoadingProgressColor="Color.Primary"  Filter="new Func<EmployeeList,bool>(FilterFuncEmployee)">  

                   <ToolBarContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Lista de proyectos en los que está contratado</MudText>
                        <MudSpacer></MudSpacer>
                        <MudTextField @bind-Value="_searchString" Placeholder="Buscar proyecto" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh Style="text-align:justify-all">Nombre proyecto</MudTh>
                        <MudTh Style="text-align:justify-all">Nombre empleador</MudTh>
                        <MudTh Style="text-align:justify-all">Tipo contrato</MudTh>
                        <MudTh Style="text-align:justify-all">Inicio contrato</MudTh>
                        <MudTh Style="text-align:justify-all">Fin contrato</MudTh>
                        <MudTh Style="text-align:justify-all">Salario</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">
                        <MudTd DataLabel="Nombre proyecto" >
                            <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/Projects/{personEmail}/{@row.EmployerEmail}/{@row.ProjectName}")">
                                @row.ProjectName
                            </MudLink>
                        </MudTd>
                        <MudTd DataLabel="Nombre del empleador" Style="text-align:justify-all">@row.EmployerName @row.EmployerLastName1 @row.EmployerLastName2</MudTd>
                         <MudTd DataLabel="Tipo contrato" Style="text-align:justify-all">@row.ContractType</MudTd>
                        <MudTd DataLabel="Inicio contrato" Style="text-align:justify-all">@row.ContractStartDate.ToShortDateString()</MudTd>
                        <MudTd DataLabel="Fin contrato" Style="text-align:justify-all">@row.ContractFinishDate.ToShortDateString()</MudTd>
                        @if (row.ContractType == "Por horas")
                        {
                            <MudTd DataLabel="Salario" Style="text-align:right" >₡@row.MountPerHour.00/H</MudTd>
                        } 
                        else
                        {
                            <MudTd DataLabel="Salario" Style="text-align:right" >₡@row.MountPerHour.00</MudTd>
                        }
            
                    </RowTemplate>

                    <PagerContent>
                            <MudPagination SelectedChanged="PageChangedE" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                    </PagerContent>
                </MudTable>
            }    
    
        }
        </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _visible;
    private bool _emptyProject = true;
    private bool _emptyAgreement = true;
    private bool _loading = true;
    private bool _isEmployer = true;
    private string _agreementMessage = "";
    private string _justification = "";
    private string _searchString = "";

    private IEnumerable<Person> _people;
    private IEnumerable<Project> _projectElements;
    private IEnumerable<EmployeeList> _joinTable = new List<EmployeeList>();
    private IEnumerable<AgreementType> _agreementType = new List<AgreementType>();
    private IEnumerable<Agreement> _agreements = new List<Agreement>();
    private List<Person> _activeEmployees = new List<Person>();


    [Parameter] public string personEmail { get; set; }
    [Parameter] public string projectName { get; set; }


    private void OpenDialog() => _visible = true;
    private void CloseDialog() => _visible = false;
    private DialogOptions _dialogOptions = new() { FullWidth = true };

    private MudTable<Project> _mudTable;
    private MudTable<EmployeeList> _table;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ContextMenuService.SetProjectsContext(false, false, "", "",false);
        if (firstRender)
        {
            _people = await PersonService.GetAllPeopleAsync();
            if (_isEmployer) 
            {
                await LoadEmployer();
            }

            if (!_isEmployer)
            {
                await LoadEmployee();
            }
        }
    }

    private async Task LoadEmployer()
    {
        _projectElements = await ProjectService.GetEmployerProyects(personEmail);
        _agreements = await AgreementService.GetEmployerAgreements(personEmail);
        SelectActiveProjects();
        _loading = false;

        if (_projectElements.Length() > 0)
        {
            _emptyProject = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SelectActiveProjects()
    {
        List<Project> _activeProjectElements = new List<Project>();
        foreach (Project actualProject in _projectElements)
        {
            if (actualProject.IsEnabled == 1)
            {
                _activeProjectElements.Add(actualProject);
            }
        }
        _projectElements = _activeProjectElements.AsEnumerable();
    }

    private async Task LoadEmployee() 
    {
        _loading = false;
        _agreements = await AgreementService.GetEmployeeAgreements(personEmail);

        if (_agreements.Length() > 0)
        {
            _agreementType = await AgreementTypeService.GetAllAgreementTypes();
            _projectElements = await ProjectService.GetAllProjectsAsync();
            _emptyAgreement = false;
            await CreateEmployeeList();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateEmployeeList()
    {
        _joinTable = from A in _agreements
                     join Pe in _people on A.EmployerEmail equals Pe.Email
                     join ATP in _agreementType on A.ContractType equals ATP.TypeAgreement
                     select new EmployeeList
                     {
                        ProjectName = A.ProjectName,
                        EmployerName = Pe.Name,
                        EmployerLastName1 = Pe.LastName1,
                        EmployerLastName2 =  Pe.LastName2,
                        EmployerEmail = A.EmployerEmail,
                        ContractType = A.ContractType,
                        ContractStartDate = (DateTime) A.ContractStartDate,
                        ContractFinishDate = (DateTime) A.ContractFinishDate,
                        MountPerHour = ATP.MountPerHour

                     };
    }

    private async Task GoToDisable(string projectName)
    {
        this.projectName = projectName;
        int amountOfAgreements = 0;
        if (_agreements.Length() > 0)
        {
            amountOfAgreements = CheckActiveAgreements(amountOfAgreements); 
            if (amountOfAgreements == 0)
            {
                await DisableProject();
            }
        }
        else
        {
            await DisableProject();
        }
    }
    public int CheckActiveAgreements(int amountOfAgreements)
    {
        _agreementMessage = "";
        int size = _agreements.Length();
        foreach (Agreement actualAgreement in _agreements)
        {
            if (actualAgreement.ProjectName == projectName && actualAgreement.ContractFinishDate > DateTime.Now)
            {
                foreach (Person actualPerson in _people)
                {
                    if (actualAgreement.EmployeeEmail == actualPerson.Email)
                    {
                        amountOfAgreements++;
                        _activeEmployees.Add(actualPerson);
                        _agreementMessage += "Nombre: " + actualPerson.Name + " " + actualPerson.LastName1 + " " + 
                                    actualPerson.LastName2 + ". Email: " + actualAgreement.EmployeeEmail + " \n";
                    }
                }
            }
        }
        if (amountOfAgreements > 0)
        {
            OpenDialog();
        }
        return amountOfAgreements;
    }

    private async Task ConfirmDisableProject()
    {
        if (_justification != "")
        {
            foreach (Person activePerson in _activeEmployees)
            {
                await AgreementService.DesactivateAgreement(activePerson.Email,personEmail, this.projectName, _justification);
            }
            await DisableProject();
            CloseDialog();
        }
    }
    private bool FilterFuncEmployer(Project element) => FilterFuncR(element, _searchString);

    private bool FilterFuncR(Project element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool FilterFuncEmployee(EmployeeList element) => FilterFuncE(element, _searchString);

    private bool FilterFuncE(EmployeeList element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    

    private async Task DisableProject() 
    {
        ProjectService.DisableProject(this.projectName, this.personEmail);
        ShowSnackNotification(this.projectName + " DESACTIVADO exitosamente", Severity.Success);
        await Task.Delay(3000);
        nav.NavigateTo($"/Projects/{personEmail}/", true);
    }

    private void CancelAction() 
    {
        CloseDialog();
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }
    private void GoToCreate()
    {
        nav.NavigateTo($"/Create_Project/{personEmail}");
    }

    private void GoToConfigs()
    {
        nav.NavigateTo($"/Projects/{personEmail}/{projectName}");
    }

    private void GoToDelete()
    {
        nav.NavigateTo($"/Projects/{personEmail}/{projectName}");
    }

    private void PageChangedR(int i)
    {
        _mudTable.NavigateTo(i - 1);
    }

    private void PageChangedE(int i)
    {
        _table.NavigateTo(i - 1);
    }
}