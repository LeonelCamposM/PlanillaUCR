@page "/Projects/{EmployerEmail}"
@using Domain.Projects.Entities
@using Application.Projects
@using Presentation.Core.Components
@using Presentation.Projects.Models
@inject NavigationManager nav
@inject IProjectService ProjectService

@{
List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
    new BreadcrumbItem("Inicio", href: $"/{EmployerEmail}"),
    new BreadcrumbItem("Proyectos", href: $"/Projects/{EmployerEmail}"),
};
}
@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
       
    </MudPaper>
}
else
{
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

    <MudGrid>   
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudItem xs="3">
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar Proyecto" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </MudItem>
    </MudGrid>
    <MudGrid>   
        <MudItem xs="8">
            <MudPaper Elevation="0">
                <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">Crear Proyecto</MudButton>
            </MudPaper>
        </MudItem>
        
        <MudDivider></MudDivider>
        <MudItem xs="4"></MudItem>
        <MudItem xs="4"></MudItem>
        <MudDivider></MudDivider>
    </MudGrid>

    <MudItem xs="2"></MudItem>
    
    <MudTable Items="@Elements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" Filter="new Func<Project,bool>(FilterFunc1)">
        <HeaderContent>
            <MudTh>Nombre</MudTh>
            <MudTh>Descripción</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombre" >
                <MudLink Color="Color.Secondary" Href="@($"/Projects/Details/{context.EmployerEmail}/{context.ProjectName}")">
                    @context.ProjectName
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Descripción">@context.ProjectDescription</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" OnClick="@(e => GoToConfigs(@context.ProjectName))"/>
                
            </MudTd>
        </RowTemplate>
        <PagerContent>
                <MudPagination SelectedChanged="PageChanged" Count="@((mudTable.GetFilteredItemsCount() + mudTable.RowsPerPage - 1) / mudTable.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
        </PagerContent>
    </MudTable>
}


@code {
    private bool _hidePosition;
    private bool _loading = true;
    private MudTable<Project> mudTable;
    private List<string> clickedEvents = new();
    private IEnumerable<Project> Elements;

    public string searchString1 = "";
    [Parameter] public string EmployerEmail { get; set; }

    [CascadingParameter]
    protected EventCallback<string> setEmail { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await setEmail.InvokeAsync(EmployerEmail);
        Elements = await ProjectService.GetEmployerProyects(EmployerEmail);
        _loading = false;
    }

    private void GoToCreate()
    {
        nav.NavigateTo($"/Create_Project/{EmployerEmail}");
    }

    private void GoToConfigs(string projectName)
    {
        nav.NavigateTo($"/Projects/Details/{EmployerEmail}/{projectName}/Configurations");
    }

    private void PageChanged(int i)
    {
        mudTable.NavigateTo(i - 1);
    }
    
    private bool FilterFunc1(Project element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Project element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}