@page "/Projects/{personEmail}"
@using Domain.Projects.Entities
@using Domain.Agreements.Entities
@using Domain.People.Entities
@using Domain.AgreementTypes.Entities
@using Application.Projects
@using Application.Agreements
@using Application.People
@using Application.AgreementTypes
@using Presentation.Core.Components
@using Presentation.Projects.Models
@using Application.ContextMenu
@using Presentation.Authentication

@inject NavigationManager nav

@inject IPersonService PersonService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject IAgreementTypeService AgreementTypeService
@inject IContextMenuService ContextMenuService

@inject NavigationManager nav

@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos",  href: null, disabled: true),

    };
}

<AuthorizeView Roles="Employer">
    <Authorized>
       @if (_loading)
        {
                <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                    <MudText Align="Align.Center" Typo="Typo.h6">
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                    </MudText>
            </MudPaper>
        }
        else
        {
            <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
            @if (_emptyProject)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">No hay proyectos asociados al empleador
                </MudText>
                <br>
                <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudButton></MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Primary">
                        <MudText> 
                            Crear nuevo Proyecto
                        </MudText> 
                    </MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton></MudButton>
                </MudToolBar>
            }
            else
            {

                <MudTable @ref="_mudTable" Items="@_projectElements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_emptyProject" LoadingProgressColor="Color.Primary" Filter="new Func<Project,bool>(FilterFuncEmployer)">  

                    <ToolBarContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Lista de proyectos</MudText>
                        <MudSpacer></MudSpacer>
                        <MudTextField @bind-Value="_searchString" Placeholder="Buscar Proyecto" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Descripción</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">
                        <MudTd DataLabel="Nombre" >
                            <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/Projects/{@row.EmployerEmail}/{@row.ProjectName}")">
                                @row.ProjectName
                            </MudLink>
                        </MudTd>

                        <MudTd DataLabel="Descripción">@row.ProjectDescription</MudTd>

                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(e => GoToDelete(@context.ProjectName))"/>
                            <MudSpacer></MudSpacer>
                        </MudTd>
            
                    </RowTemplate>

                    <PagerContent>
                            <MudPagination SelectedChanged="PageChangedR" Count="@((_mudTable.GetFilteredItemsCount() + _mudTable.RowsPerPage - 1) / _mudTable.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                    </PagerContent>
                </MudTable>
                <br>
                <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Primary">Crear Proyecto</MudButton>
            }    
    
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>


<AuthorizeView Roles="Employee">
    <Authorized>
        @if (_loading)
        {
            _isEmployer = false;
            <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                    <MudText Align="Align.Center" Typo="Typo.h6">
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                    </MudText>
            </MudPaper>
        }
        else
        {
            <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
            @if (_emptyAgreement)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">No hay proyectos asociados al empleado
                </MudText>
            }
            else
            {

                <MudTable @ref="@_table" Items="@_joinTable" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_emptyAgreement" LoadingProgressColor="Color.Primary"  Filter="new Func<EmployeeList,bool>(FilterFuncEmployee)">  

                   <ToolBarContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Lista de proyectos en los que esta contratado</MudText>
                        <MudSpacer></MudSpacer>
                        <MudTextField @bind-Value="_searchString" Placeholder="Buscar Proyecto contratado" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh Style="text-align:justify-all">Nombre Proyecto</MudTh>
                        <MudTh Style="text-align:justify-all">Nombre Empleador</MudTh>
                        <MudTh Style="text-align:justify-all">Tipo Contrato</MudTh>
                        <MudTh Style="text-align:justify-all">Inicio contrato</MudTh>
                        <MudTh Style="text-align:justify-all">Fin contrato</MudTh>
                        <MudTh Style="text-align:justify-all">Salario</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="row">
                        <MudTd DataLabel="Nombre proyecto" >
                            <MudLink Color="Color.Primary" Underline="Underline.Always" Href="@($"/Projects/{personEmail}/{@row.EmployerEmail}/{@row.ProjectName}")">
                                @row.ProjectName
                            </MudLink>
                        </MudTd>
                        <MudTd DataLabel="Nombre del empleador" Style="text-align:justify-all">@row.EmployerName @row.EmployerLastName1 @row.EmployerLastName2</MudTd>
                         <MudTd DataLabel="Tipo contrato" Style="text-align:justify-all">@row.ContractType</MudTd>
                        <MudTd DataLabel="Inicio contrato" Style="text-align:justify-all">@row.ContractStartDate.ToShortDateString()</MudTd>
                        <MudTd DataLabel="Fin contrato" Style="text-align:justify-all">@row.ContractFinishDate.ToShortDateString()</MudTd>
                        @if (row.ContractType == "Por horas")
                        {
                            <MudTd DataLabel="Salario" Style="text-align:right" >₡@row.MountPerHour.00/H</MudTd>
                        } 
                        else
                        {
                            <MudTd DataLabel="Salario" Style="text-align:right" >₡@row.MountPerHour.00</MudTd>
                        }
            
                    </RowTemplate>

                    <PagerContent>
                            <MudPagination SelectedChanged="PageChangedE" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                    </PagerContent>
                </MudTable>
            }    
    
        }
        </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {

    private bool _emptyProject = true;
    private bool _emptyAgreement = true;
    private bool _loading = true;
    public string _searchString = "";
    private bool _isEmployer = true;


    private MudTable<EmployeeList> _table;
    private IEnumerable<Project> _projectElements;
    private IEnumerable<EmployeeList> _joinTable = new List<EmployeeList>();
    private MudTable<Project> _mudTable;


    private IEnumerable<AgreementType> _agreementType = new List<AgreementType>();
    private IEnumerable<Agreement> _agreements = new List<Agreement>();
    private IEnumerable<Person> _people;

    [Parameter] public string personEmail { get; set; }
    [Parameter] public string projectName { get; set; }
    public string employeeEmail { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ContextMenuService.SetProjectsContext(false ,false, "");
        if (firstRender)
        {
            if (_isEmployer) 
            {
                _projectElements = await ProjectService.GetEmployerProyects(personEmail);
                _loading = false;
                if (_projectElements.Length() > 0){
                    _emptyProject = false;
                }
                await InvokeAsync(StateHasChanged);
            }

            if (!_isEmployer)
            {
                _loading = false;
                await CreateProjectListForEmployee();
            }
        }

    }
    private async Task CreateProjectListForEmployee() {
        _agreements = await AgreementService.GetEmployeeProjects(personEmail);
        _loading = false;

        if (_agreements.Length() > 0)
        {
            _agreementType = await AgreementTypeService.GetAllAgreementTypes();
            _people = await PersonService.GetAllPeopleAsync();
            _projectElements = await ProjectService.GetAllProjectsAsync();
            _emptyAgreement = false;
            await CreateEmployeeList();
            int size = _joinTable.Length();
        }
        await InvokeAsync(StateHasChanged);
    }
    private async Task CreateEmployeeList()
    {
       _joinTable = from A in _agreements
                  join Pe in _people on A.EmployerEmail equals Pe.Email
                  join ATP in _agreementType on A.ContractType equals ATP.TypeAgreement
                  select new EmployeeList
                  {
                        ProjectName = A.ProjectName,
                        EmployerName = Pe.Name,
                        EmployerLastName1 = Pe.LastName1,
                        EmployerLastName2 =  Pe.LastName2,
                        EmployerEmail = A.EmployerEmail,
                        ContractType = A.ContractType,
                        ContractStartDate = (DateTime) A.ContractStartDate,
                        ContractFinishDate = (DateTime) A.ContractFinishDate,
                        MountPerHour = ATP.MountPerHour

                  };
    }

    private bool FilterFuncEmployer(Project element) => FilterFuncR(element, _searchString);

    private bool FilterFuncR(Project element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool FilterFuncEmployee(EmployeeList element) => FilterFuncE(element, _searchString);

    private bool FilterFuncE(EmployeeList element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ProjectName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void GoToCreate()
    {
        nav.NavigateTo($"/Create_Project/{personEmail}");
    }
    

    private void GoToConfigs()
    {
        nav.NavigateTo($"/Projects/{personEmail}/{projectName}");
    }

    private void GoToDelete()
    {
        nav.NavigateTo($"/Projects/{personEmail}/{projectName}");
    }

    private void PageChangedR(int i)
    {
        _mudTable.NavigateTo(i - 1);
    }

    private void PageChangedE(int i)
    {
        _table.NavigateTo(i - 1);
    }
}