@page "/Projects/{personEmail}/{projectName}"
@using Application.Projects
@using Application.Employers
@using Application.Agreements
@using Domain.Projects.Entities
@using Domain.Employers.Entities
@using Domain.Agreements.Entities
@using Presentation.Core.Components
@using Presentation.Projects.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using Application.ContextMenu

@inject IEmployerService EmployerService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject IContextMenuService ContextMenuService
@inject NavigationManager nav
@inject ISnackbar Snackbar

@{ 
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{personEmail}"),
        new BreadcrumbItem($"{projectName}", href: null, disabled: true)
    };
}
<AuthorizeView Roles="Employer">
    <Authorized>
        @if (_loading)
        {
            <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                 <MudText Align="Align.Center" Typo="Typo.h6">
                      <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
                 </MudText>
            </MudPaper>
        }
        else
        {
            <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

    
            <MudToolBar DisableGutters="true" Class="gap-4">
                <MudSpacer></MudSpacer>
                @if(_disabled)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="EnableForm"/>
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="DisableForm"/>
                }
        
            </MudToolBar>
            <MudGrid>
                @*Text fields *@
                <MudItem xs="12" sm="12">
                    <MudPaper  Height="250px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                        @if (_disabled)
                        {
                            <MudText Align="Align.Center" Typo="Typo.h6">Detalles del proyecto</MudText>
                        }
                        else
                        {
                            <MudText Align="Align.Center" Typo="Typo.h6">Configuraciones del proyecto</MudText>
                        }
                        <MudForm @ref="form">
                            <MudGrid>
                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudTextField Label="Nombre del Proyecto" Class="mt-3" Variant="Variant.Outlined" ReadOnly="@_disabled"  
                                    Required="true" RequiredError="Ingrese un nombre para su proyecto" 
                                    @bind-Value="newName" For="@(() => limits.projectName)">
                                    </MudTextField>
                                </MudItem>
                                <MudItem xs="2"> </MudItem>

                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudTextField Label="Descripción del Proyecto" Lines="6" Variant="Variant.Outlined" ReadOnly="@_disabled"
                                    @bind-Value="projectInfo.ProjectDescription"  For="@(() => limits.description )"
                                    ></MudTextField>
                                </MudItem>
                                <MudItem xs="2"> </MudItem>
                
                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudSelect typeof="int" @bind-Value="projectInfo.PaymentInterval" Label="Intervalo de pago" Variant="Variant.Outlined"
                                    ReadOnly="@_disabled" >
                                        <MudSelectItem Value="@("Quincenal")">Pago Quincenal</MudSelectItem>
                                        <MudSelectItem Value="@("Mensual")">Pago Mensual</MudSelectItem>
                                        <MudSelectItem Value="@("Semanal")">Pago Semanal</MudSelectItem>
                                        <MudSelectItem Value="@("Bisemanal")">Pago Bisemanal</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="2"></MudItem>

                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="4">
                                    <MudNumericField Immediate="true" Label="Monto máximo para beneficios" Format="N2" Culture="@cultureCR"
                                    ReadOnly="@_disabled" Variant="Variant.Outlined" @bind-Value="_maximumAmountForBenefits" Adornment="Adornment.Start" 
                                    AdornmentText="@cultureCR.NumberFormat.CurrencySymbol" Required="false" RequiredError="Campo no requerido"/>
                                </MudItem>

                                <MudItem xs="4">
                                    <MudNumericField @bind-Value="projectInfo.MaximumBenefitAmount" Min=0 ReadOnly="@_disabled" Label="Cantidad máxima de beneficios" 
                                    Variant="Variant.Outlined"></MudNumericField>
                                </MudItem>

                                <MudItem xs="2"></MudItem>
                                <MudItem xs="2"></MudItem>
                                <MudItem xs="8">
                                    <br />
                                    <MudDivider />
                                </MudItem>
                                <MudItem xs="2"></MudItem>
                                <MudItem xs="2"></MudItem>

                                @if(_disabled == false) {
                                    <MudItem xs="8"> 
                                        <MudButton Disabled="@snackHandler._saving" OnClick="SaveProject" 
                                        Variant="Variant.Filled" Color="Color.Primary">
                                            @if (@snackHandler._saving)
                                            {
                                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                                <MudText Class="ms-2">Actualizando</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Actualizar</MudText>
                                            }
                                        </MudButton>
                                        <MudButton Disabled="true"> </MudButton>

                                        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Transparent">
                                            <MudText>Cancelar</MudText>
                                        </MudButton>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Employee">
    <Authorized>
        @if (_loading)
        {
            <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                 <MudText Align="Align.Center" Typo="Typo.h6">
                      <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
                 </MudText>
            </MudPaper>
        }
        else
        {
            <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
            <MudGrid>
                @*Text fields *@
                <MudItem xs="12" sm="12">
                    <MudPaper  Height="250px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                        <MudText Align="Align.Center" Typo="Typo.h6">Detalles del proyecto</MudText>
                        <MudForm @ref="form">
                            <MudGrid>
                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudTextField Label="Nombre del Proyecto" Class="mt-3" Variant="Variant.Outlined" ReadOnly="true"
                                    @bind-Value="newName">
                                    </MudTextField>
                                </MudItem>
                                <MudItem xs="2"> </MudItem>

                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudTextField Label="Email del Empleador" Lines="1" Variant="Variant.Outlined" ReadOnly="true"
                                    @bind-Value="projectInfo.EmployerEmail"></MudTextField>
                                </MudItem>
                                <MudItem xs="2"> </MudItem>

                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudTextField Label="Descripción del Proyecto" Lines="3" Variant="Variant.Outlined" ReadOnly="true"
                                    @bind-Value="projectInfo.ProjectDescription"></MudTextField>
                                </MudItem>
                                <MudItem xs="2"> </MudItem>
                
                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="8">
                                    <MudTextField typeof="int" @bind-Value="projectInfo.PaymentInterval" Label="Intervalo de pago" 
                                    Variant="Variant.Outlined" ReadOnly="true"></MudTextField>
                                </MudItem>
                                <MudItem xs="2"></MudItem>

                                <MudItem xs="2"> </MudItem>
                                <MudItem xs="4">
                                    <MudTextField Label="Monto máximo para beneficios" Format="N2" Culture="@cultureCR"
                                    ReadOnly="true" Variant="Variant.Outlined" @bind-Value="_maximumAmountForBenefits" Adornment="Adornment.Start" 
                                    AdornmentText="@cultureCR.NumberFormat.CurrencySymbol"/>
                                </MudItem>

                                <MudItem xs="4">
                                    <MudTextField @bind-Value="projectInfo.MaximumBenefitAmount" ReadOnly="true" Label="Cantidad máxima de beneficios" 
                                    Variant="Variant.Outlined"></MudTextField>
                                </MudItem>

                                <MudItem xs="2"></MudItem>
                                <MudItem xs="2"></MudItem>
                                <MudItem xs="8">
                                    <br />
                                    <MudDivider />
                                </MudItem>        
                            </MudGrid>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _loading = true;
    private bool _disabled = true;
    private string newName = "";

    private string _oldpersonEmail = "";
    private string _oldProjectName = "";
    private string _oldProjectDescription = "";
    private double? _maximumAmountForBenefits = 0.0;
    private int _oldMaximumBenefitAmount = 0;
    private string _oldPaymentInterval = "";
    private int _oldIsEnabled = 1;


    Project projectInfo = new Project("","","",0.0,0,"",1);
    private IEnumerable<Agreement> agreementElements;
    MudForm form;
    SnackHandler snackHandler = new SnackHandler();
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");
    LimitsValidationForm limits = new LimitsValidationForm();

    [Parameter] public string personEmail { get; set; }
    [Parameter] public string projectName { get; set; }
    public string disabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true,true,projectName);
        projectInfo = await ProjectService.GetProject(personEmail,projectName);
        agreementElements = await AgreementService.GetEmployeeProjects(personEmail);

        if (projectInfo != null)
        {
            newName = projectInfo.ProjectName;
            _oldpersonEmail = projectInfo.EmployerEmail;
            _oldProjectName = projectInfo.ProjectName;
            _oldProjectDescription = projectInfo.ProjectDescription;
            _maximumAmountForBenefits = projectInfo.MaximumAmountForBenefits;
            _oldMaximumBenefitAmount = projectInfo.MaximumBenefitAmount;
            _oldPaymentInterval = projectInfo.PaymentInterval;
            _oldIsEnabled = projectInfo.IsEnabled;
            _loading = false;
        }
    }

    async Task SaveProject()
    {
        snackHandler._saving = true;

        await form.Validate();
        bool valid = true;
        if (projectInfo.ProjectName != newName) 
        { 
            valid = await ValidName(); 
        }
        if (form.IsValid && valid)
        {
            snackHandler._saving = false;
            projectInfo.MaximumAmountForBenefits = (double)_maximumAmountForBenefits;
            ProjectService.ModifyProject(projectInfo, newName);
            projectInfo.ProjectName = newName;
            projectName = newName;
            ShowSnackNotification(projectInfo.ProjectName + " modificado exitosamente", Severity.Success);
            DisableForm();

        }
        snackHandler._saving = false;
    }
    async Task<bool> ValidName()
    {
        bool valid = true;
        Project tempProject = await ProjectService.GetProject(personEmail, newName);
        if (tempProject != null)
        {
            valid = false;
            ShowSnackNotification("El nombre del proyecto " + newName + " ya está en uso", Severity.Error);
            DisableForm();
        }
        return valid;
    }
    public class LimitsValidationForm
    {
        [StringLength(250, ErrorMessage = "El nombre del proyecto es muy grande")]
        public string projectName { get; set; }

        [EmailAddress (ErrorMessage = "El Email es inválido")]
        [StringLength(250, ErrorMessage = "El Email es muy grande")]
        public string email { get; set; }

        [StringLength(600, ErrorMessage = "La descripción es muy grande")]
        public string description { get; set; }
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    async Task  Cancel()
    {
        projectInfo.EmployerEmail = _oldpersonEmail;
        projectInfo.ProjectName = _oldProjectName;
        projectInfo.ProjectDescription = _oldProjectDescription;
        projectInfo.MaximumAmountForBenefits = (double)_maximumAmountForBenefits;
        projectInfo.MaximumBenefitAmount = _oldMaximumBenefitAmount;
        projectInfo.PaymentInterval = _oldPaymentInterval;
        projectInfo.IsEnabled = _oldIsEnabled;
        projectInfo = await ProjectService.GetProject(personEmail,projectName);
        nav.NavigateTo($"/Projects/{personEmail}");
    }

    private void EnableForm()
    {
        _disabled = false;
        newName = projectInfo.ProjectName;
    }

    private void DisableForm()
    {
        _disabled = true;
        newName = projectInfo.ProjectName;
    }
}