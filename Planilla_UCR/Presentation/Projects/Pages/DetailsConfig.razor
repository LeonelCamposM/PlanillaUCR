@page "/Projects/{personEmail}/{projectName}"
@using Application.Projects
@using Application.Employers
@using Application.Agreements
@using Application.Subscribes
@using Application.Email
@using Application.ContextMenu
@using Domain.Projects.Entities
@using Domain.Employers.Entities
@using Domain.Agreements.Entities
@using Domain.Subscribes.Entities
@using Presentation.Core.Components
@using Presentation.Projects.Models
@using System.Globalization
@using System.ComponentModel.DataAnnotations

@inject IEmailServices EmailService
@inject IEmployerService EmployerService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject ISubscribeService SubscribeService
@inject IContextMenuService ContextMenuService
@inject NavigationManager nav
@inject ISnackbar Snackbar

@{ 
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{personEmail}"),
        new BreadcrumbItem($"{projectName}", href: null, disabled: true)
    };
}

@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">
                <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
            </MudText>
    </MudPaper>
}
else
{
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

    
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudSpacer></MudSpacer>
        @if(_disabled)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="EnableForm"/>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="DisableForm"/>
        }
        
    </MudToolBar>
    <MudGrid>
        @*Text fields *@
        <MudItem xs="12" sm="12">
            <MudPaper  Height="250px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                @if (_disabled)
                {
                    <MudText Align="Align.Center" Typo="Typo.h6">Detalles del proyecto</MudText>
                }
                else
                {
                    <MudText Align="Align.Center" Typo="Typo.h6">Configuraciones del proyecto</MudText>
                }
                <MudForm @ref="_form">
                    <MudGrid>
                        <MudItem xs="2"> </MudItem>
                        <MudItem xs="8">
                            <MudTextField Label="Nombre del proyecto" Class="mt-3" Variant="Variant.Outlined" ReadOnly="@_disabled"  
                            Required="true" RequiredError="Ingrese un nombre para su proyecto" 
                            @bind-Value="_newName" For="@(() => _limits.projectName)">
                            </MudTextField>
                        </MudItem>
                        <MudItem xs="2"> </MudItem>

                        <MudItem xs="2"> </MudItem>
                        <MudItem xs="8">
                            <MudTextField Label="Descripción del proyecto" Lines="6" Variant="Variant.Outlined" ReadOnly="@_disabled"
                            @bind-Value="_projectInfo.ProjectDescription"  For="@(() => _limits.description )"
                            ></MudTextField>
                        </MudItem>
                        <MudItem xs="2"> </MudItem>
                
                        <MudItem xs="2"> </MudItem>
                        <MudItem xs="8">
                            <MudSelect typeof="int" @bind-Value="_projectInfo.PaymentInterval" Label="Intervalo de pago" Variant="Variant.Outlined"
                            ReadOnly="@_disabled" >
                                <MudSelectItem Value="@("Quincenal")">Pago quincenal</MudSelectItem>
                                <MudSelectItem Value="@("Mensual")">Pago mensual</MudSelectItem>
                                <MudSelectItem Value="@("Semanal")">Pago semanal</MudSelectItem>
                                <MudSelectItem Value="@("Bisemanal")">Pago bisemanal</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="2"></MudItem>

                        <MudItem xs="2"> </MudItem>
                        <MudItem xs="4">
                            <MudNumericField Immediate="true" Label="Monto máximo para beneficios" Format="N2" Culture="@_cultureCR"
                            ReadOnly="@_disabled" Variant="Variant.Outlined" @bind-Value="_maximumAmountForBenefits" Adornment="Adornment.Start" 
                            AdornmentText="@_cultureCR.NumberFormat.CurrencySymbol" Required="false" RequiredError="Campo no requerido"/>
                        </MudItem>

                        <MudItem xs="4">
                            <MudNumericField @bind-Value="_projectInfo.MaximumBenefitAmount" Min=0 ReadOnly="@_disabled" Label="Cantidad máxima de beneficios" 
                            Variant="Variant.Outlined"></MudNumericField>
                        </MudItem>

                        <MudItem xs="2"></MudItem>
                        <MudItem xs="2"></MudItem>
                        <MudItem xs="8">
                            <br />
                            <MudDivider />
                        </MudItem>
                        <MudItem xs="2"></MudItem>
                        <MudItem xs="2"></MudItem>

                        @if(_disabled == false) {
                            <MudItem xs="8"> 
                                <MudButton Disabled="@snackHandler._saving" OnClick="ValidProject" 
                                Variant="Variant.Filled" Color="Color.Primary">
                                    @if (@snackHandler._saving)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">Actualizando</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Actualizar</MudText>
                                    }
                                </MudButton>
                                <MudButton Disabled="true"> </MudButton>

                                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Transparent">
                                    <MudText>Cancelar</MudText>
                                </MudButton>
                            </MudItem>
                        }
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {
    private bool _loading = true;
    private bool _disabled = true;
    private string _newName = "";
    private double? _maximumAmountForBenefits = 0.0;
    private string _oldDescription = "";
    private string _oldPaymentInterval = "";
    private int _oldMaximumBenefitAmount = 0;
    private bool _changesInBenefits = false;

    private CultureInfo _cultureCR = CultureInfo.GetCultureInfo("es-CR");
    private LimitsValidationForm _limits = new LimitsValidationForm();
    private Project _projectInfo = new Project("","","",0.0,0,"",1);
    private IEnumerable<Agreement> _agreementElements;
    private IEnumerable<Subscribe> _employeebenefits;
    private List<string> _employees = new List<string>();
    private List<string> _overbenefitEmployees = new List<string>();
    private MudForm _form;
    SnackHandler snackHandler = new SnackHandler();

    [Parameter] public string personEmail { get; set; }
    [Parameter] public string projectName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true,true,projectName, personEmail,true, false);
        _projectInfo = await ProjectService.GetProject(personEmail,projectName);
        _agreementElements = await AgreementService.GetEmployerAgreements(personEmail);

        if (_projectInfo != null)
        {
            _maximumAmountForBenefits = _projectInfo.MaximumAmountForBenefits;
            _newName= projectName;
            _oldDescription = _projectInfo.ProjectDescription;
            _oldPaymentInterval = _projectInfo.PaymentInterval;
            _oldMaximumBenefitAmount = _projectInfo.MaximumBenefitAmount;
            _loading = false;
        }
    }

    async Task ValidProject()
    {
        snackHandler._saving = true;
        await _form.Validate();
        bool _valid = true;
        _newName = _newName.Trim();

        if (_projectInfo.ProjectName != _newName) 
        { 
            _valid = await ValidName(); 
        }

        if (_form.IsValid && _valid)
        {
            SaveProject();
        }
        snackHandler._saving = false;
    }

    void SaveProject()
    {

        snackHandler._saving = false;
        _projectInfo.MaximumAmountForBenefits = (double)_maximumAmountForBenefits;
        ProjectService.ModifyProject(_projectInfo, _newName);
        _projectInfo.ProjectName = _newName;
        projectName = _newName;
        ShowSnackNotification(_projectInfo.ProjectName + " modificado exitosamente", Severity.Success);
        DisableForm();

    }

    async Task<bool> ValidName()
    {
        bool _valid = true;
        _newName = _newName.Trim();
        Project _tempProject = await ProjectService.GetProject(personEmail, _newName);
        if (_tempProject != null)
        {
            _valid = false;
            ShowSnackNotification("El nombre: " + _newName + ", ya está siendo utilizado", Severity.Error);
            DisableForm();
        }
        return _valid;
    }

    private void FindEmployeesOfProject()
    {
        foreach (Agreement item in _agreementElements)
        {
            _employees.Add(item.EmployeeEmail);
        }
    }

    private async Task<int> GetOverbenefitEmployees()
    {
        double totalCost = 0;
        int amountOfBenefits = 0;
        foreach (string actualEmployee in _employees)
        {
            _employeebenefits = await SubscribeService.GetBenefitsByEmployee(actualEmployee, projectName);
            amountOfBenefits = _employeebenefits.Length();
            foreach (Subscribe actualSubscribe in _employeebenefits)
            {
                totalCost += actualSubscribe.Cost;
            }
            if (totalCost > _projectInfo.MaximumAmountForBenefits)
                _overbenefitEmployees.Add(actualEmployee);
        }
        return amountOfBenefits;
    }

    private void NotifyMyEmployeesIncrease()
    {
        if ((_oldMaximumBenefitAmount < _projectInfo.MaximumBenefitAmount || 
            _maximumAmountForBenefits < _projectInfo.MaximumAmountForBenefits))
        {
            //Send email too my employees
        }
    }

    private void NotifyMyEmployeesDecrease()
    {
        if ((_oldMaximumBenefitAmount > _projectInfo.MaximumBenefitAmount || 
            _maximumAmountForBenefits > _projectInfo.MaximumAmountForBenefits))
        {
            //Send email too my limits employees
            // Send Email to employer limits 
        }
    }

    public class LimitsValidationForm
    {
        [StringLength(250, ErrorMessage = "El nombre del proyecto es muy grande")]
        public string projectName { get; set; }

        [EmailAddress (ErrorMessage = "El Email es inválido")]
        [StringLength(250, ErrorMessage = "El Email es muy grande")]
        public string email { get; set; }

        [StringLength(600, ErrorMessage = "La descripción es muy grande")]
        public string description { get; set; }
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void Cancel()
    {
        _newName = _projectInfo.ProjectName;
        _projectInfo.ProjectDescription = _oldDescription;
        _projectInfo.PaymentInterval = _oldPaymentInterval;
        _maximumAmountForBenefits = _projectInfo.MaximumAmountForBenefits;
        _projectInfo.MaximumBenefitAmount = _oldMaximumBenefitAmount;
        _disabled = true;
        nav.NavigateTo($"/Projects/{personEmail}/{projectName}/");
    }

    private void EnableForm()
    {
        _disabled = false;
        _newName = _projectInfo.ProjectName;
    }

    private void DisableForm()
    {
        _disabled = true;
        _newName = _projectInfo.ProjectName;
    }
}