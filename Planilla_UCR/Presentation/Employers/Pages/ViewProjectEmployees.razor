@page "/View_Hired_Employees"
@using Application.Employees
@using Domain.Employees.DTOs
@using Presentation.Core.Components
@using Presentation.Employer.Components
@inject NavigationManager nav
@inject IEmployeeService EmployeeService


@if(_loading){

    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
       
    </MudPaper>
}else{
    @if (!empty && !_loading)
    {
        List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Proyectos", href: "#"),
            new BreadcrumbItem("Empleados", href: "#"),
        };

        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudTable @ref="@_table" Items="@_elements" RowsPerPage="5" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<EmployeeDTO,bool>(FilterFunc1)">
                    <ToolBarContent>
                         <MudText Align="Align.Center" Typo="Typo.h6">Empleados contratados</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Foto de perfil</MudTh>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Cedula</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="IMG">IMG</MudTd>
                        <MudTd DataLabel="Nombre">@context.Email</MudTd>
                        <MudTd DataLabel="Cedula">Cedula1</MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
                </PagerContent>
            </MudTable>
        </MudPaper>
    }
    else
    {
        <ViewProjectEmployeesError></ViewProjectEmployeesError>
    }
}

@code {
    private bool _loading = true;
    private bool empty = true;
    string searchString1 = "";
    private MudTable<EmployeeDTO> _table;
    private IEnumerable<EmployeeDTO> _elements = new List<EmployeeDTO>(); 
    

    protected override async Task OnInitializedAsync()
    {
        _elements = await EmployeeService.GetAllEmployeesAsync();
        if (_elements.Length() == 0)
        {
            empty = true;
        }
        else
        {
            empty = false;
        }
        _loading = false;
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(EmployeeDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(EmployeeDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
