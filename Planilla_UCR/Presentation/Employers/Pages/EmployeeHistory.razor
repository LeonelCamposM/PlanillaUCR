@page "/Reports/{employerEmail}/Employee_History"
@using Domain.Agreements.Entities
@using Domain.People.Entities
@using Domain.Projects.Entities
@using Domain.Payments.Entities
@using Application.Agreements
@using Application.People
@using Application.Projects
@using Application.Payments
@using Presentation.Employers.Models
@using Presentation.Employers.XLS

@using System.IO
@inject IJSRuntime js
@using System.Globalization


@inject NavigationManager nav
@inject ISnackbar Snackbar

@inject IPersonService PersonService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject IPaymentService PaymentService

@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Histórico de empleados",  href: null, disabled: true),

    };
}

@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">
                <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
            </MudText>
    </MudPaper>
}
else
{
    @if (_emptyHistory)
    {
        <MudText Typo="Typo.h6" Align="Align.Center">No existen registros de pagos para ningún empleado.
        </MudText>
    }
    else
    {
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        

        <MudTable Style="pt-6" @ref="@_table" Items="@_paymentsHistory" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_emptyHistory" LoadingProgressColor="Color.Primary" Filter="new Func<EmployeeHistoryList,bool>(FiltersFunc)">  

            <ToolBarContent>
                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Proyecto" Variant="Variant.Outlined" TextChanged="OnProjectNameSelect">
                    <MudSelectItem Value="@(" ")"/>
                    @foreach (var state in _paymentsProjectNames) {
                        <MudSelectItem T="string" Value="@state">
                            @state
                        </MudSelectItem>
                    }   
                </MudSelect>
                </MudItem>
                
                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Tipo contrato" Variant="Variant.Outlined"  TextChanged="OnContractTypeSelect">
                    <MudSelectItem Value="@(" ")"/>
                    <MudSelectItem Value="@("Medio tiempo")"/>
                    <MudSelectItem Value="@("Servicios profesionales")"/>
                    <MudSelectItem Value="@("Tiempo completo")"/>
                </MudSelect>
                </MudItem>
                
                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Fecha" Variant="Variant.Outlined"  TextChanged="OnPaymentDateSelect">
                     <MudSelectItem Value="@(" ")"/>
                    @foreach (var state in _paymentsDates) {
                        <MudSelectItem T="string" Value="@state">
                            @state
                        </MudSelectItem>
                    }   
                </MudSelect>
                </MudItem>

                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Cédula" Variant="Variant.Outlined"  TextChanged="GetEmployeeSsn">
                     <MudSelectItem Value="@(" ")"/>
                    @foreach (var state in _paymentsSsn) {
                        <MudSelectItem T="int" Value="@state">
                            @state
                        </MudSelectItem>
                    }   
                </MudSelect>
                </MudItem>
            </ToolBarContent> 

            <ColGroup>
                <col style="width: 50%;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
            </ColGroup>

            <ToolBarContent>
                <MudText Align="Align.Center" Typo="Typo.h6">Histórico de empleados</MudText>
                <MudSpacer></MudSpacer>
            </ToolBarContent>

            <HeaderContent>
                <MudTh Style="text-align:justify-all">Nombre</MudTh>
                <MudTh Style="text-align:justify-all">Proyecto</MudTh>
                <MudTh Style="text-align:justify-all">Cédula</MudTh>
                <MudTh Style="text-align:justify-all">Tipo de empleado</MudTh>
                <MudTh Style="text-align:justify-all">Salario bruto</MudTh>
                <MudTh Style="text-align:justify-all">Beneficios</MudTh>
                <MudTh Style="text-align:justify-all">Cargas sociales empleador</MudTh>
                <MudTh Style="text-align:justify-all">Deducciones obligatorias empleado</MudTh>
                <MudTh Style="text-align:justify-all">Deducciones voluntarias</MudTh>
                <MudTh Style="text-align:justify-all">Costo empleador</MudTh>

            </HeaderContent>

            <RowTemplate Context="row">
                <MudTd DataLabel="employeeName" Style="text-align:justify-all">@row.EmployeeName @row.EmployeeLastName1 @row.EmployeeLastName2</MudTd>
                <MudTd DataLabel="projectName" Style="text-align:justify-all">@row.ProjectName</MudTd>
                <MudTd DataLabel="ssn" Style="text-align:justify-all">@row.Ssn</MudTd>
                <MudTd DataLabel="contractType" Style="text-align:justify-all">@row.ContractType</MudTd>
                <MudTd DataLabel="grossSalary" Style="text-align:justify-right">₡@row.GrossSalary</MudTd>
                <MudTd DataLabel="totalBenefits" Style="text-align:right">₡@row.TotalBenefits</MudTd>
                <MudTd DataLabel="employerSocialCharges" Style="text-align:right" >₡@row.EmployerSocialCharges</MudTd>
                <MudTd DataLabel="mandatoryEmployeeDeductions" Style="text-align:right" >₡@row.MandatoryEmployeeDeductions</MudTd>
                <MudTd DataLabel="voluntaryDeductions" Style="text-align:right" >₡@row.VoluntaryDeductions</MudTd>
                <MudTd DataLabel="employeeCost" Style="text-align:right" >₡@row.EmployeeCost</MudTd>
            </RowTemplate>

            <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
            </PagerContent>
        </MudTable>
         <br>
        <MudButton OnClick="ClickExportXLS" Variant="Variant.Filled" Color="Color.Primary">
                <MudText>Exportar excel</MudText>
        </MudButton>
    }    
    
}

@code {
    private bool _emptyHistory = true; 
    private bool _loading = true; 
    private string _projectNameFilter = "";
    private string _contracTypeFilter = "";
    private string _paymentDateFilter = "";
    private int _ssnFilter = 0;
    private IEnumerable<Person> _people;
    private IEnumerable<Agreement> _agreements;
    private IEnumerable<Payment> _payment;
    private IEnumerable<EmployeeHistoryList> _paymentsHistory = new List<EmployeeHistoryList>();
    private IList<String> _paymentsDates = new List<String>();
    private IList<String> _paymentsProjectNames = new List<String>();
    private IList<int> _paymentsSsn = new List<int>();
    private MudTable<EmployeeHistoryList> _table;
    private EmployeeHistoryList[] _paymentsHistoryExcel;

    private CultureInfo _cultureCR = CultureInfo.GetCultureInfo("es-CR");


    [Parameter] public string employerEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _agreements = await AgreementService.GetEmployerAgreements(employerEmail);
        _emptyHistory = false;

        if(_agreements.Length() > 0) 
        {
            _emptyHistory = false;
            _payment = await PaymentService.GetEmployerPayments(employerEmail);
            _people = await PersonService.GetAllPeopleAsync();
            CreateEmployeeHistory();

            _paymentsDates = await GetPaymentDate();
            _paymentsProjectNames = await GetProyectName();
            _paymentsSsn = await GetEmployeeSsn();
        }
        _loading = false;
        await InvokeAsync(StateHasChanged);

    }  

    private async Task<IList<String>> GetPaymentDate()
    {
        IList<Payment> paymentsList = _payment.ToList();
        foreach (Payment payment in paymentsList)
        {
            if (!_paymentsDates.Contains(payment.EndDate.ToShortDateString()))
            {
                _paymentsDates.Add(payment.EndDate.ToShortDateString());
            }
        }
        _paymentsDates =  _paymentsDates.Reverse().Take(10).ToList();
        return _paymentsDates;
    }

    private async Task<IList<String>> GetProyectName()
    {
        IList<Payment> paymentsList = _payment.ToList();
        foreach (Payment payment in paymentsList)
        { 
            if (!_paymentsProjectNames.Contains(payment.ProjectName))
            {
                _paymentsProjectNames.Add(payment.ProjectName);
            }
        }
        _paymentsProjectNames = _paymentsProjectNames.Reverse().Take(10).ToList();
        return _paymentsProjectNames;
    }

    private async Task<IList<int>> GetEmployeeSsn()
    {
        IList<Person> personList = _people.ToList();
        foreach (Person person in personList)
        { 
            if (!_paymentsSsn.Contains(person.Ssn))
            {
                _paymentsSsn.Add(person.Ssn);
            }
        }
        _paymentsSsn = _paymentsSsn.Reverse().Take(10).ToList();
        return _paymentsSsn;
    }


    void CreateEmployeeHistory()
    {
        _paymentsHistory = from Pa in _payment
                           join Pe in _people on Pa.EmployeeEmail equals Pe.Email 
                           join A in _agreements on Pe.Email equals A.EmployeeEmail
                           where A.IsEnabled == 1 && Pa.EmployerEmail == A.EmployerEmail
                           select new EmployeeHistoryList
                     {
                        ProjectName = Pa.ProjectName,
                        EmployeeName = Pe.Name,
                        EmployeeLastName1 = Pe.LastName1,
                        EmployeeLastName2 = Pe.LastName2,
                        Ssn = Pe.Ssn,
                        ContractType = A.ContractType,
                        GrossSalary = Pa.GrossSalary,
                        PaymentDate = Pa.StartDate.ToString(),
                     };
    }

    private void OnProjectNameSelect(string selected) {
        _projectNameFilter = selected;
    }

    private void OnContractTypeSelect(string selected) {
        _contracTypeFilter = selected;
    }

    private void OnPaymentDateSelect(string selected) {
        _paymentDateFilter = selected; 
    }

    private void OnSsnSelect(int selected) {
        _ssnFilter = selected; 
    }

    private bool FiltersFunc(EmployeeHistoryList element) => 
        FilterFunc(element, _projectNameFilter,_contracTypeFilter, _paymentDateFilter, _ssnFilter);

    private bool FilterFunc(EmployeeHistoryList element, string searchString1,
    string searchString2, string searchString3, int searchInt)
    {
        bool projectNameBool = (element.ProjectName.Equals(searchString1));
        bool contractTypeBool = (element.ContractType.Contains(searchString2, StringComparison.OrdinalIgnoreCase));
        bool paymentDateBool = (element.PaymentDate.Contains(searchString3, StringComparison.OrdinalIgnoreCase));
        bool ssnBool = (element.Ssn.Equals(searchInt));
        
        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((projectNameBool && contractTypeBool) && string.IsNullOrWhiteSpace(searchString3)))
            return true;

        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((projectNameBool && paymentDateBool) && string.IsNullOrWhiteSpace(searchString2)))
            return true;

        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((contractTypeBool && paymentDateBool) && string.IsNullOrWhiteSpace(searchString1)))
            return true;

        if ((string.IsNullOrWhiteSpace(searchString1) && string.IsNullOrWhiteSpace(searchString2) && string.IsNullOrWhiteSpace(searchString3)))
            return true;  

        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((projectNameBool && contractTypeBool) && string.IsNullOrWhiteSpace(searchInt.ToString())))
            return true;

        return false;
    }



    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private async void ClickExportXLS()
    {
        GetExcelContent();
        var xls = new Excel();
        await xls.GenerateExcelReport5Async(js, _paymentsHistoryExcel, "Reporte histórico de mis pagos.xlsx");
    }

    private void GetExcelContent()
    {
        _paymentsHistoryExcel = _paymentsHistoryExcel.ToArray();
    }
}