@page "/Reports/{employerEmail}/Employee_History"
@using Application.PaymentCalculator
@using Domain.Agreements.Entities
@using Domain.People.Entities
@using Domain.Projects.Entities
@using Domain.Payments.Entities
@using Domain.LegalDeductions.Entities
@using Domain.Subscribes.Entities
@using Domain.Subscriptions.Entities
@using Application.Subscriptions
@using Application.Subscribes
@using Application.LegalDeductions
@using Application.Agreements
@using Application.People
@using Application.Projects
@using Application.TaxCalculator
@using Application.Payments
@using Presentation.Employers.Models
@using Presentation.Employers.XLS

@using System.IO
@inject IJSRuntime js
@using System.Globalization


@inject NavigationManager nav
@inject ISnackbar Snackbar

@inject IPersonService PersonService
@inject IProjectService ProjectService
@inject IAgreementService AgreementService
@inject IPaymentService PaymentService
@inject ISubscribeService SubscribeService
@inject ISubscriptionService SubscriptionService
@inject ILegalDeductionService LegalDeductionService
@inject ITaxCalculatorService TaxCalculatorService
@inject IPaymentCalculatorService PaymentCalculatorService


@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h6">
                <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
            </MudText>
    </MudPaper>
}
else
{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Histórico de empleados",  href: null, disabled: true),

    };
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
    </MudPaper>
    if (!_emptyHistory)
    {

        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center align-center">
                <MudItem xs="8">
                        <MudText Align="Align.Center" Typo="Typo.h6" GutterBottom="true">Reporte histórico de pagos a empleados</MudText>
                </MudItem>
                </MudItem>
        </MudGrid>
        <br>
        <MudTable Style="pt-6" @ref="@_table" Items="@_paymentsHistory" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_emptyHistory" LoadingProgressColor="Color.Primary" Filter="new Func<EmployeeHistoryList,bool>(FiltersFunc)">  

            <ToolBarContent>
                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Proyecto" Variant="Variant.Outlined" TextChanged="OnProjectNameSelect">
                    <MudSelectItem Value="@(" ")"/>
                    @foreach (var state in _paymentsProjectNames) 
                    {
                        <MudSelectItem T="string" Value="@state">
                            @state
                        </MudSelectItem>
                    }   
                </MudSelect>
                </MudItem>
                
                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Tipo contrato" Variant="Variant.Outlined"  TextChanged="OnContractTypeSelect">
                    <MudSelectItem Value="@(" ")"/>
                    <MudSelectItem Value="@("Medio tiempo")"/>
                    <MudSelectItem Value="@("Servicios profesionales")"/>
                    <MudSelectItem Value="@("Tiempo completo")"/>
                </MudSelect>
                </MudItem>
                
                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Fecha" Variant="Variant.Outlined"  TextChanged="OnPaymentDateSelect">
                        <MudSelectItem Value="@(" ")"/>
                    @foreach (var state in _paymentsDates) 
                    {
                        <MudSelectItem T="string" Value="@state">
                            @state
                        </MudSelectItem>
                    }   
                </MudSelect>
                </MudItem>

                <MudItem xs="2">
                <MudSelect Dense="true" T="string" Label="Cédula" Variant="Variant.Outlined"  TextChanged="GetEmployeeSsn">
                        <MudSelectItem Value="@(" ")"/>
                    @foreach (var state in _paymentsSsn) 
                    {
                        <MudSelectItem T="string" Value="@state">
                            @state
                        </MudSelectItem>
                    }   
                </MudSelect>
                </MudItem>
            </ToolBarContent> 

            <ColGroup>
                <col style="width: 80px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
                <col style="width: 60px;" />
            </ColGroup>

            <HeaderContent>
                <MudTh Style="text-align:justify-all">Nombre</MudTh>
                <MudTh Style="text-align:justify-all">Proyecto</MudTh>
                <MudTh Style="text-align:justify-all">Cédula</MudTh>
                <MudTh Style="text-align:justify-all">Tipo de empleado</MudTh>
                <MudTh Style="text-align:justify-all">Salario bruto</MudTh>
                <MudTh Style="text-align:justify-all">Beneficios</MudTh>
                <MudTh Style="text-align:justify-all">Cargas sociales empleador</MudTh>
                <MudTh Style="text-align:justify-all">Deducciones obligatorias empleado</MudTh>
                <MudTh Style="text-align:justify-all">Deducciones voluntarias</MudTh>
                <MudTh Style="text-align:justify-all">Costo empleador</MudTh>

            </HeaderContent>

            <RowTemplate Context="row">
                <MudTd DataLabel="employeeName" Style="text-align:justify-all">@row.EmployeeName @row.EmployeeLastName1 @row.EmployeeLastName2</MudTd>
                <MudTd DataLabel="projectName" Style="text-align:justify-all">@row.ProjectName</MudTd>
                <MudTd DataLabel="ssn" Style="text-align:justify-all">@row.Ssn</MudTd>
                <MudTd DataLabel="contractType" Style="text-align:justify-all">@row.ContractType</MudTd>
                <MudTd DataLabel="grossSalary" Style="text-align:justify-right">@ParseToCRC(@row.GrossSalary)</MudTd>
                <MudTd DataLabel="totalBenefits" Style="text-align:right">@ParseToCRC(@row.TotalBenefits)</MudTd>
                <MudTd DataLabel="employerSocialCharges" Style="text-align:right" >@ParseToCRC(@row.EmployerSocialCharges)</MudTd>
                <MudTd DataLabel="mandatoryEmployeeDeductions" Style="text-align:right" >@ParseToCRC(@row.MandatoryEmployeeDeductions)</MudTd>
                <MudTd DataLabel="voluntaryDeductions" Style="text-align:right" >@ParseToCRC(@row.VoluntaryDeductions)</MudTd>
                <MudTd DataLabel="employeeCost" Style="text-align:right" >@ParseToCRC(@row.EmployeeCost)</MudTd>
            </RowTemplate>

            <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
            </PagerContent>
        </MudTable>
            <br>
        <MudButton OnClick="ClickExportXLS" Variant="Variant.Filled" Color="Color.Primary">
                <MudText>Exportar excel</MudText>
        </MudButton>
    }
    else
    {
        <MudText Align="Align.Center" Typo="Typo.h6">
            No existen registros de pagos para ningún empleado.
        </MudText>
    }
    
}

@code {
    private bool _emptyHistory = true; 
    private bool _loading = true; 

    private string _projectNameFilter = "";
    private string _contracTypeFilter = "";
    private string _paymentDateFilter = "";
    private string _ssnFilter = "";

    private IEnumerable<Person> _people;
    private IEnumerable<Agreement> _agreements;
    private IEnumerable<Payment> _payment;
    private IEnumerable<Project> _projects;
    private IEnumerable<EmployeeHistoryList> _paymentsHistory = new List<EmployeeHistoryList>();
    private IEnumerable<LegalDeduction> _legalDeductions = new List<LegalDeduction>();
    private IList<String> _paymentsDates = new List<String>();
    private IList<String> _paymentsProjectNames = new List<String>();
    private IList<String> _paymentsSsn = new List<String>();
    private MudTable<EmployeeHistoryList> _table;
    private EmployeeHistoryList[] _paymentsHistoryExcel;

    private CultureInfo _cultureCR = CultureInfo.GetCultureInfo("es-CR");

    [Parameter] public string employerEmail { get; set; }



    protected override async Task OnInitializedAsync()
    {
        _agreements = await AgreementService.GetEmployerAgreements(employerEmail);
        _emptyHistory = false;

        if(_agreements.Length() > 0) 
        {
            _emptyHistory = false;
            _payment = await PaymentService.GetEmployerPayments(employerEmail);
            _people = await PersonService.GetAllPeopleAsync();
            _projects = await ProjectService.GetEmployerProyects(employerEmail);
            CreateEmployeeHistory();
            await FillColumns();
            await ActivateFilters();
        }
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }  

    private void CreateEmployeeHistory()
    {
        _paymentsHistory = from Pe in _people
                           join A in _agreements on Pe.Email equals A.EmployeeEmail 
                           join P in _projects on A.ProjectName equals P.ProjectName 
                           where A.IsEnabled == 1 
                           select new EmployeeHistoryList
                            {
                                ProjectName = A.ProjectName,
                                EmployeeName = Pe.Name,
                                EmployeeLastName1 = Pe.LastName1,
                                EmployeeLastName2 = Pe.LastName2,
                                EmployeeEmail = A.EmployeeEmail,
                                Ssn = Pe.Ssn,
                                ContractType = A.ContractType,
                            };
    }

    private async Task FillColumns()
    {
        GetAllGrossySalaries();
        await GetAllLegalDeductions();
        await GetAllVoluntaryDeductions();
        await GetAllBenefits();
        GetTotalSocialCharges();
        GetTotalCostForEmployee();
    }

    private void GetAllGrossySalaries()
    {
        IList<EmployeeHistoryList> temporalList = _paymentsHistory.ToList();
        foreach (EmployeeHistoryList person in temporalList)
        {
            double totalGrossSalary = 0.0;
            foreach (Payment pay in _payment) 
            {
                if (pay.EmployeeEmail == person.EmployeeEmail)
                {
                    totalGrossSalary += pay.GrossSalary;
                    person.PaymentDate = pay.EndDate.ToShortDateString();
                }
            }
            person.GrossSalary = totalGrossSalary;
            totalGrossSalary = 0.0;
        }
        _paymentsHistory = temporalList.AsEnumerable();
    }

    private async Task GetAllLegalDeductions()
    {
        IList<EmployeeHistoryList> temporalList = _paymentsHistory.ToList();
        _legalDeductions = await LegalDeductionService.GetAllAsync();

        foreach (EmployeeHistoryList person in temporalList)
        {
            double costLegalDeductions = 0.0;
            foreach (Payment pay in _payment) 
            {
                if (!person.ContractType.Equals("Servicios profesionales") && pay.EmployeeEmail == person.EmployeeEmail)
                {

                    foreach (var item in _legalDeductions)
                    {
                        costLegalDeductions += TaxCalculatorService.GetTaxAmount(item.DeductionName, pay.GrossSalary);
                    }
                    person.MandatoryEmployeeDeductions = costLegalDeductions;
                }
            }
        }
        _paymentsHistory = temporalList.AsEnumerable();
    }

    private async Task GetAllVoluntaryDeductions()
    {
        IList<EmployeeHistoryList> temporalList = _paymentsHistory.ToList();

        foreach (EmployeeHistoryList person in temporalList)
        {
            double costVoluntaryDeductions = 0.0;
            foreach (Payment pay in _payment) 
            {
                if (pay.EmployeeEmail == person.EmployeeEmail)
                {
                    Subscribe searchSubscribe= new Subscribe(pay.EmployeeEmail,pay.EmployerEmail, pay.ProjectName, "", 0.0, pay.StartDate, pay.EndDate);
                    IList<Subscription> subscriptions = (await SubscribeService.GetSubscriptionCostsByDate(searchSubscribe)).ToList();

                    costVoluntaryDeductions += PaymentCalculatorService.DeductionsCost(subscriptions);
                }

            }
            person.VoluntaryDeductions = costVoluntaryDeductions;
        }
        _paymentsHistory = temporalList.AsEnumerable();
    }

    private async Task GetAllBenefits()
    {
        IList<Subscription> benefits;
        IList<EmployeeHistoryList> temporalList = _paymentsHistory.ToList();

        foreach (EmployeeHistoryList person in temporalList)
        {
            double costBenefits = 0.0;
            foreach (Payment pay in _payment) 
            {
                if (pay.EmployeeEmail == person.EmployeeEmail)
                {
                    benefits = (IList<Subscription>) await SubscriptionService.GetBenefitsByEmployee(pay.EmployeeEmail, pay.ProjectName);
                    costBenefits += PaymentCalculatorService.DeductionsCost(benefits);
                }

            }
            person.TotalBenefits = costBenefits;
        }
        _paymentsHistory = temporalList.AsEnumerable();
    }



    private void GetTotalSocialCharges()
    {
        IList<EmployeeHistoryList> temporalList = _paymentsHistory.ToList();

        foreach (EmployeeHistoryList person in temporalList)
        {
           double totalSocialCharges = 0.0;
           string deductionName = "CCSS (14.50%)";         
           double deductionCost = Math.Round(TaxCalculatorService.GetCSSSEmployerTaxes(person.GrossSalary),2);         
           totalSocialCharges += deductionCost;         
           deductionName = "Otras instituciones (7.25%)";         
           deductionCost = Math.Round(TaxCalculatorService.GetOtherInstitutionsEmployerTaxes(person.GrossSalary),2);         
           totalSocialCharges += deductionCost;         
           deductionName = "Ley de protección al trabajador (4.75%)";         
           deductionCost = Math.Round(TaxCalculatorService.GetWorkerWarrantiesEmployerTaxes(person.GrossSalary),2);         
           totalSocialCharges += deductionCost;

           person.EmployerSocialCharges = totalSocialCharges;
           _paymentsHistory = temporalList.AsEnumerable();
        }
    }

    private void GetTotalCostForEmployee()
    {
        foreach (EmployeeHistoryList person in _paymentsHistory)
        {
            person.EmployeeCost = person.GrossSalary + person.TotalBenefits + person.EmployerSocialCharges + 
                                  person.MandatoryEmployeeDeductions + person.VoluntaryDeductions;
        }
    }

    private string ParseToCRC(double amount)
    {
        return _cultureCR.NumberFormat.CurrencySymbol + CostFormat(amount);
    }

    private string CostFormat(double cost)
    {
        string formatedCost = string.Format("{0:N}", cost);
        return formatedCost;
    }

    //filter

    private async Task ActivateFilters()
    {
        _paymentsDates = await GetPaymentDate();
        _paymentsProjectNames = await GetProyectName();
        _paymentsSsn = await GetEmployeeSsn();
    }

    private async Task<IList<String>> GetPaymentDate()
    {
        foreach (EmployeeHistoryList history in _paymentsHistory)
        {
            if (!_paymentsDates.Contains(history.PaymentDate))
            {
                _paymentsDates.Add(history.PaymentDate);
            }
        }
        _paymentsDates =  _paymentsDates.Reverse().Take(10).ToList();
        return _paymentsDates;
    }

    private async Task<IList<String>> GetProyectName()
    {
        foreach (EmployeeHistoryList history in _paymentsHistory)
        { 
            if (!_paymentsProjectNames.Contains(history.ProjectName))
            {
                _paymentsProjectNames.Add(history.ProjectName);
            }
        }
        _paymentsProjectNames = _paymentsProjectNames.Reverse().Take(10).ToList();
        return _paymentsProjectNames;
    }

    private async Task<IList<String>> GetEmployeeSsn()
    {
        foreach (EmployeeHistoryList person in _paymentsHistory)
        { 
            if (!_paymentsSsn.Contains(person.Ssn.ToString()))
            {
                _paymentsSsn.Add(person.Ssn.ToString());
            }
        }
        _paymentsSsn = _paymentsSsn.Reverse().Take(10).ToList();
        return _paymentsSsn;
    }

    private void OnProjectNameSelect(string selected) {
        _projectNameFilter = selected;
    }

    private void OnContractTypeSelect(string selected) {
        _contracTypeFilter = selected;
    }

    private void OnPaymentDateSelect(string selected) {
        _paymentDateFilter = selected; 
    }

    private void OnSsnSelect(string selected) {
        _ssnFilter = selected; 
    }

    private bool FiltersFunc(EmployeeHistoryList element) => 
        FilterFunc(element, _projectNameFilter,_contracTypeFilter, _paymentDateFilter, _ssnFilter);

    private bool FilterFunc(EmployeeHistoryList element, string searchString1,
    string searchString2, string searchString3, string searchString4)
    {
        bool projectNameBool = (element.ProjectName.Equals(searchString1));
        bool contractTypeBool = (element.ContractType.Contains(searchString2, StringComparison.OrdinalIgnoreCase));
        bool paymentDateBool = (element.PaymentDate.Contains(searchString3, StringComparison.OrdinalIgnoreCase));
        bool ssnBool = (element.Ssn.Equals(searchString4));
        
        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((projectNameBool && contractTypeBool) && string.IsNullOrWhiteSpace(searchString3)))
            return true;

        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((projectNameBool && paymentDateBool) && string.IsNullOrWhiteSpace(searchString2)))
            return true;

        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((contractTypeBool && paymentDateBool) && string.IsNullOrWhiteSpace(searchString1)))
            return true;

        if ((string.IsNullOrWhiteSpace(searchString1) && string.IsNullOrWhiteSpace(searchString2) && string.IsNullOrWhiteSpace(searchString3)))
            return true;  

        if ((projectNameBool && contractTypeBool && paymentDateBool) || ((projectNameBool && contractTypeBool) && string.IsNullOrWhiteSpace(searchString4)))
            return true;

        return false;
    }

    //Excel
    private async Task ClickExportXLS()
    {
        GetExcelContent();
        var xls = new Excel();
        await xls.GenerateExcelReport5Async(js, _paymentsHistoryExcel, "Reporte histórico de mis pagos.xlsx");
    }

    private void GetExcelContent()
    {
        _paymentsHistoryExcel = _paymentsHistory.ToArray();
    }
    
    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}