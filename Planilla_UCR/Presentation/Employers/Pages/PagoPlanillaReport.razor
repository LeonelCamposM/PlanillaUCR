@page "/Reports/{employerEmail}/{projectName}"

@using Domain.Agreements.DTOs
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.People
@using Domain.People.Entities
@using Domain.Employees.Entities
@using Application.Employees
@using Application.Employers
@using Domain.Employers.Entities
@using Domain.Employers.DTOs
@using Domain.Projects.DTOs
@using Domain.Projects.Entities
@using Application.Projects
@using Presentation.Projects.Models
@using Presentation.Core.Components
@using System.ComponentModel.DataAnnotations
@using Presentation.Employers.Models
@using Application.ContextMenu
@using Application.LegalDeductions
@using Domain.LegalDeductions.Entities
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Application.Subscribes
@using Domain.Subscribes.Entities
@using Presentation.Payments.Models
@using Domain.Payments.Entities
@using Application.Payments

@inject IProjectService ProjectService
@inject ISnackbar Snackbar
@inject IAgreementService AgreementService
@inject IEmployeeService EmployeeService
@inject IContextMenuService ContextMenuService
@inject IDialogService DialogService
@inject ILegalDeductionService LegalDeductionService
@inject ISubscriptionService SubscriptionService
@inject ISubscribeService SubscribeService
@inject IPaymentService PaymentService

@inject NavigationManager nav

@if(_loading) {
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}else{

        List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Reportes", href: $"/Reports/{employerEmail}/{projectName}"),
            new BreadcrumbItem("Pago planilla",  href: null, disabled: true)
        }; 
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
        </MudPaper>

        if(!_empty)
        {
            <MudTable Items="@_templateTempSalariesTable" Striped="true" Bordered="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                        <HeaderContent>
                            @* Add a final temp table with these attributes in it. 
                            Total has to be the last item to be calculate*@
                            <MudTh Style="text-align:justify-all">Total gastos empleador</MudTh>
                            <MudTh Style="text-align:justify-all"> _totalFinal </MudTh>
                        </HeaderContent>
            </MudTable>
        <br>

        @*Remember to change variable name to *@

        <MudTable @ref="@_table" Items="@_templateTempSalariesTable" RowsPerPage="4" Striped="true" Bordered="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                        <HeaderContent>
                            <MudTh Style="text-align:justify-all">Desglose salario</MudTh>
                            <MudTh Style="text-align:justify-all"> Monto </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                        <MudTd DataLabel="Desglose salario" Style="text-align:justify-all"> @context.Name</MudTd>
                        <MudTd DataLabel="Monto" Style="text-align:justify-all"> @context.Amount </MudTd>

                        </RowTemplate>
            </MudTable>
        <br>

        @* Solution? Task delayTask = fillOutBenefitsTable(); *@

        <MudTable @ref="@_table" Items="@_templateTempDeductionsTable" Striped="true" Bordered="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"> 
                        <HeaderContent>
                            <MudTh Style="text-align:justify-all">Desglose aporte del patrono</MudTh>
                            <MudTh Style="text-align:justify-all"> Monto </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                        <MudTd DataLabel="Desglose salario" Style="text-align:justify-all">@context.Name </MudTd>
                        <MudTd DataLabel="Monto" Style="text-align:justify-all">@context.Amount</MudTd>
                        </RowTemplate>
            </MudTable>
                <br>
           
            <MudTable @ref="@_table" Items="@_templateTempBenefitsTable" Striped="true" Bordered="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
                        <HeaderContent>
                            <MudTh Style="text-align:justify-all">Desglose beneficios</MudTh>
                            <MudTh Style="text-align:justify-all"> Monto </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                        <MudTd DataLabel="Desglose salario" Style="text-align:justify-all">@context.Name</MudTd>
                        <MudTd DataLabel="Monto" Style="text-align:justify-all">@context.Amount</MudTd>
                        </RowTemplate>
            </MudTable>
        }
        <br>
            <MudButton Variant="Variant.Filled" @onclick="@(e => OpenDialog(employerEmail))" Color="Color.Primary">
                <MudText>
                Exportar
                </MudText> 
            </MudButton> 
            <MudDialog @bind-IsVisible="_visible" Options="_dialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.h6" Style="text-align:center">
                        Se ha enviado el reporte a su correo electrónico: @employerEmail
                    </MudText>
                </TitleContent>
                <DialogActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseDialog" Class="px-10">Aceptar</MudButton>
                </DialogActions>
            </MudDialog>
    
}

@code {
    [Parameter]
    public string projectName { get; set; }
    [Parameter]
    public string employerEmail { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private DialogOptions _dialogOptions = new() { FullWidth = true };


    private IEnumerable<Payment> _paymentList = new List<Payment>();
    private IEnumerable<Agreement> _agreementList = new List<Agreement>();
    private IEnumerable<Person> _hiredEmployees = new List<Person>();
    private IEnumerable<LegalDeduction> _deductionList = new List<LegalDeduction>();
    private IEnumerable<Subscription> _benefitList = new List<Subscription>();

    // Try to make this generic. Issues with async/await

    private IList<ReportePlanillasTemplateTable> _templateTempSalariesTable = new List<ReportePlanillasTemplateTable>();
    private IList<ReportePlanillasTemplateTable> _templateTempBenefitsTable = new List<ReportePlanillasTemplateTable>();
    private IList<ReportePlanillasTemplateTable> _templateTempDeductionsTable = new List<ReportePlanillasTemplateTable>();
    private IList<ReportePlanillasTemplateTable> _templateTempFinalTable = new List<ReportePlanillasTemplateTable>();

    private IList<ReportePlanillasTemplateTable> _templateTableFinalList = new List<ReportePlanillasTemplateTable>();
    IList<Payment> _paidEmployees;

    private double _totalDeductions;
    private double _totalSalaries; // Just to try out the concept
    private double _totalBenefits;
    private double _totalFinal = 9999.0; 
    @* Look for a better name *@


    private MudTable<ReportePlanillasTemplateTable> _table;
    private bool _loading = true;
    private bool _empty = true;
    private bool _visible = false;

    protected override async Task OnInitializedAsync()
    {
        ContextMenuService.SetProjectsContext(true, true, projectName, employerEmail, false);
        _empty = false;
        _agreementList = await AgreementService.GetProjectAgreements(projectName, employerEmail);
        // Payment _payment = new Payment("", _projectInfo.EmployerEmail, _projectInfo.ProjectName, 0, _projectInfo.LastPaymentDate, _nextPay);
        //IList<Payment> _paidEmployees = 
        _paymentList = await PaymentService.GetAllPaymentsStartAndEndDates(employerEmail, projectName);
        var startDate = _paymentList.GroupBy( e => e.StartDate);
        var endDate = _paymentList.GroupBy( e => e.EndDate);
        DateTime start = new DateTime(2022,06,01);
        DateTime end = new DateTime(2022, 06, 14);
        Payment _payment = new Payment("", employerEmail, projectName, 0, start, end);
        _paidEmployees = await PaymentService.GetProjectPayments(_payment);

        fillOutSalariesTable();

        _deductionList = await LegalDeductionService.GetAllAsync();
        fillOutDeductionsTable();
        _benefitList = await SubscriptionService.GetBenefitsByProject(employerEmail, projectName);
        await fillOutBenefitsTable();   
        //_projects = await ProjectService.GetEmployerProyects(employerEmail);
        //_agreements = await AgreementService.GetAllAgreementsByProjectAndEmployer(projectName, employerEmail);
        //_agreementType = await AgreementTypeService.GetAllAgreementTypes();
        //_hiredEmployees = await EmployeeService.GetProjectEmployees(projectName, employerEmail);
        //PopulateJoinAttribute();

        getAllTotals();
        _loading = false;
    }

    private IEnumerable<ReportePlanillasTemplateTable> JoinAgreementAndPayment() 
    { 
        var _tempJoinedTable = from A in _agreementList
                               join P in _paidEmployees on new { A.EmployerEmail, A.ProjectName, A.EmployeeEmail} equals 
                               new {P.EmployerEmail, P.ProjectName, P.EmployeeEmail} into joinedTables
                               from J in joinedTables.DefaultIfEmpty()group J by new
                               {
                                   A.ContractType
                               }
                                      into grp
                               select new ReportePlanillasTemplateTable
                                        {
                                            Name = grp.Key.ContractType,
                                            Amount = grp.Sum(e=>e.GrossSalary)
                                        };
        return _tempJoinedTable;
    }


    private void fillOutSalariesTable()
    {
        var myTempTable = JoinAgreementAndPayment();
        double salarieCost = 0.0;
        string salarieName;
        foreach (var salarie in myTempTable)
        {
            salarieCost = salarie.Amount;
            salarieName = salarie.Name;
            _templateTempSalariesTable.Add(salarie);
            _totalSalaries += salarieCost;
        }
    }

    private void fillOutDeductionsTable()
    {
        double deductionCost = 0.0;
        string deductionName;
        foreach (var deduction in _deductionList)
        {
            deductionCost = _totalSalaries * deduction.Cost;
            deductionName = deduction.DeductionName + ": " + Math.Round(deduction.Cost * 100, 2) + "%";
            ReportePlanillasTemplateTable myTempTable = new ReportePlanillasTemplateTable(deductionName, deductionCost);
            _templateTempDeductionsTable.Add(myTempTable);
            _totalDeductions += deductionCost;
        }
    }

    private async Task fillOutBenefitsTable()
    {
        double benefitsCost = 0.0;
        foreach (var benefit in _benefitList)
        {
            IEnumerable<Subscribe> tempList = await SubscribeService.GetEmployeesBySubscription(employerEmail, projectName, benefit.SubscriptionName);
            benefitsCost = benefit.Cost * tempList.Length();

            ReportePlanillasTemplateTable myTempTable = new ReportePlanillasTemplateTable(benefit.SubscriptionName, benefitsCost);
            _templateTempBenefitsTable.Add(myTempTable);
            _totalBenefits += benefitsCost;
        }
    }

    private void OpenDialog(string employeeEmail)
    {
        _visible = true;

    }

    private void CloseDialog()
    {
        _visible = false;
    }

    private void getAllTotals()
    {
        _totalFinal = _totalBenefits + _totalDeductions + _totalSalaries;
    }
    private void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 2;
        Snackbar.Configuration.VisibleStateDuration = 3000;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }
}