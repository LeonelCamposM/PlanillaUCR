@page "/Projects/{EmployerEmail}/{ProjectName}/Agreements/New"
@using Domain.Agreements.DTOs
@using Application.Agreements
@using Domain.Agreements.Entities
@using Presentation.Core.Components
@using System.ComponentModel.DataAnnotations


@using Application.People
@using Domain.People.Entities
@using Domain.Employees.Entities
@using Application.Employees

@using Application.Employers
@using Domain.Employers.Entities
@using Domain.Employers.DTOs

@using Application.AgreementTypes
@using Domain.AgreementTypes.Entities
@using Domain.AgreementTypes.DTOs


@inject ISnackbar Snackbar
@inject IAgreementService AgreementService
@inject IAgreementTypeService AgreementTypeService
@inject IPersonService PersonService
@inject IEmployeeService EmployeeService
@inject IEmployerService EmployerService


 <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
<MudGrid>
    @*Text fields *@ 
    <MudItem xs="10" sm="12">
        <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
             <MudForm @ref="form">
                <MudText Align="Align.Center" Typo="Typo.h6">Establecimiento de contrato</MudText>
                <MudGrid>
                    @*Small fields *@
                    <MudItem xs="2"> </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="agreementObject.EmployeeEmail" Label="Email del empleado" Variant="Variant.Outlined" Required="true" RequiredError="El email del empleado es necesario"
                            Validation="@(new EmailAddressAttribute() {ErrorMessage = "Por favor, digite un correo válido"})" ></MudTextField>

                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="agreementObject.EmployerEmail" Label="Email del empleador" Variant="Variant.Outlined" Required="true" RequiredError="El email del empleador es necesario"
                         Validation="@(new EmailAddressAttribute() {ErrorMessage = "Por favor, digite un correo válido"})" ></MudTextField>
                    </MudItem>
                    <MudItem xs="2"> </MudItem>
                    <MudItem xs="2"> </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="agreementObject.ProjectName" Label="Nombre del proyecto" Variant="Variant.Outlined" Required="true" RequiredError="El nombre del proyecto es necesario">
                        </MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                    <MudSelect @bind-Value="agreementObject.ContractType" Label="Tipo de contrato" Variant="Variant.Outlined" Required="true"  RequiredError="El tipo de contrato es necesario">
                        <MudSelectItem Value="@("Tiempo completo")" />
                        <MudSelectItem Value="@("Medio tiempo")" />
                        <MudSelectItem Value="@("Servicios profesionales")" />
                        <MudSelectItem Value="@("Por horas")" />
                    </MudSelect>
                    </MudItem>
                    <MudItem xs="2"> </MudItem>
        
                    <MudItem xs="2"> </MudItem>
                    <MudItem xs="4">
                        <MudNumericField @bind-Value="salaryPerMonth" Label="Monto por hora" Variant="Variant.Outlined" Required="true" RequiredError="El monto por hora es necesario" HideSpinButtons="true" Min = "0"> </MudNumericField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudTextField @bind-Value="ReadOnly" Label="Deducciones" Variant="Variant.Outlined" Required="true" ReadOnly="true" RequiredError="El nombre del proyecto es necesario"></MudTextField>
                    </MudItem>
                    <MudItem xs="2"> </MudItem>
                    <MudItem xs="2"> </MudItem>
                    <MudItem xs="4">
                        <MudDatePicker Label="Fecha de inicio" @bind-Date="startDate" DateFormat="yyyy.MM.dd" Variant="Variant.Outlined" Required="true" RequiredError="La fecha de inicio es necesaria"/>
                    </MudItem>

                    <MudItem xs="4">
                        <MudDatePicker Label="Fecha de finalización" @bind-Date="endDate" DateFormat="yyyy.MM.dd" Variant="Variant.Outlined" Required="true" RequiredError="La fecha de finalización es necesaria"/>
                    </MudItem> 
                    <MudItem xs="2"> </MudItem>
                    @*Create buton *@
                    <MudItem xs="2"> </MudItem>
                           <MudButton Disabled="@_saving" @bind-IsValid="@_canSend" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="TryToAdd">                    
                                @if (_saving)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText Class="ms-2">Crear</MudText>
                                }

                            </MudButton>
                    @*Clear buton*@
                    <MudButton Disabled = "true" OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Error">
                        <MudText>Limpiar</MudText>
                    </MudButton>
                   
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>

</MudGrid>

@code{
    [Parameter] public string EmployerEmail { get; set; }
    [Parameter] public string ProjectName { get; set; }

    Agreement agreementObject = new Agreement("", "", "", null, "", 0, null);
    AgreementType anAgreementType = new AgreementType("",0);

    MudForm form;
    DateTime? startDate;
    DateTime? endDate;
    int? salaryPerMonth;
    string format = "yyyy/MM/dd";

    private bool _isLoading = true;
    private bool _saving = false;
    private bool _canSend = false;
    public string ReadOnly { get; set; } = "10 000";




    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "#"),
        new BreadcrumbItem("Contratos", href: "#"),
    };

    protected override async Task OnInitializedAsync()
    {
        agreementObject.EmployerEmail = EmployerEmail;
        agreementObject.ProjectName = ProjectName;
        _isLoading = false;

    }


    async Task TryToAdd()
    {   
        await form.Validate();
        if (form.IsValid)
        {
            if (checkDates())
            {
                bool isValid = await validateEmployeeEmail(agreementObject.EmployeeEmail);
                if (isValid)
                {
                    isValid = await validateAgreementsSalary(agreementObject.ContractType);
                    if (isValid)
                    {
                        isValid = await validateEmployerEmail(agreementObject.EmployerEmail);
                        await SaveAgreementType();
                        ShowSnackNotification("Información guardada correctamente", Severity.Success);
                    }
                }

            }
            else
            {
                ShowSnackNotification("Por favor, digite fechas de inicio y finalización válidas", Severity.Error);
            }
        }

    }

    async Task SaveAgreementType()
    {
        _saving = true;
        _saving = false;
        await AgreementService.CreateAgreementAsync(agreementObject);
        ShowSnackNotification("Contrato establecido", Severity.Success);
    }


    void CleanForm()
    {
        agreementObject.EmployeeEmail = "";
        agreementObject.EmployerEmail = "";
        agreementObject.ProjectName = "";
        agreementObject.ContractFinishDate = null;
        agreementObject.ContractType = "";
        salaryPerMonth = null;
        startDate = null;
        endDate = null;
    }

    bool checkDates()
    {
        bool isValid = true;
        if (startDate > endDate)
        {
            isValid = false;
        }
        formatDates(startDate,endDate);
        return isValid;
    }


    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void formatDates(DateTime? startDate, DateTime? endDate)
    {
        DateTime lstartDate = (DateTime)startDate;
        DateTime lendDate = (DateTime)endDate;

        agreementObject.ContractStartDate = startDate;
        agreementObject.ContractFinishDate = endDate;
    }

    async Task<bool> validateEmployeeEmail(string employeeEmail)
    {
        bool isValid = true;
        IEnumerable<Employee> employeeList = await EmployeeService.GetEmployeeByEmail(employeeEmail);
        Agreement myAgreement = new Agreement("", "", "", null, "", 0, null);

        myAgreement = await AgreementService.GetContracteeByEmail(agreementObject);

        if (employeeList.Length() == 0)
        {   
            isValid=false;

            ShowSnackNotification("El email " + employeeEmail + " NO se encuentra en registrado en el sistema, no es posible asignarlo al contrato ", Severity.Error);
        }
        if (myAgreement != null)
        {
            isValid=false;
            ShowSnackNotification("El email " + employeeEmail + " ya posee un contrato en el contexto actual ", Severity.Error);

        }
        return isValid;
    }

    async Task<bool> validateEmployerEmail(string employerEmail)
    {
        bool valid = true;
        IEnumerable<Person> personList = await PersonService.GetPersonByEmail(employerEmail);
        if (personList.Length() == 0)
        {
            valid=false;
            ShowSnackNotification("El email " + employerEmail + " NO se encuetra en la base de datos", Severity.Error);
        }
        return valid;
    }

    async Task<bool> validateAgreementsSalary(string agreementType)
    {
        bool isValid = true;

        IEnumerable<AgreementType> salaryList = await AgreementTypeService.GetSalaryPerAgreement(agreementType);

        if (salaryList.Length() == 0)
        {
            isValid=false;
            ShowSnackNotification("El monto introducido NO es válido, inserte un monto válido", Severity.Error);
        }
        return isValid;
    }
}