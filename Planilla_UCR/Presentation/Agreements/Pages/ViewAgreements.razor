@page "/Projects/{employerEmail}/{projectName}/Agreements/See"


@using Domain.Agreements.DTOs
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.People
@using Domain.People.Entities
@using Domain.Employees.Entities
@using Application.Employees
@using Application.Employers
@using Domain.Employers.Entities
@using Domain.Employers.DTOs
@using Application.AgreementTypes
@using Domain.AgreementTypes.Entities
@using Domain.AgreementTypes.DTOs
@using Domain.Projects.DTOs
@using Domain.Projects.Entities
@using Application.Projects
@using Presentation.Projects.Models
@using Presentation.Core.Components
@using System.ComponentModel.DataAnnotations
@using Presentation.Agreements.Models


@inject IProjectService ProjectService
@inject ISnackbar Snackbar
@inject IAgreementService AgreementService
@inject IAgreementTypeService AgreementTypeService
@inject IEmployeeService EmployeeService
@inject NavigationManager nav


@if(_loading) 
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}
else
{
    @if (!_loading)
    {
        List <BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
            new BreadcrumbItem(@projectName, href: $"/Projects/Details/{employerEmail}/{projectName}"),
            new BreadcrumbItem("Contratos", href: $"/Projects/{employerEmail}/{projectName}/Agreements/New"),
        };
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
        </MudPaper>

        if(!_empty)
        {
                <MudTable @ref="@_table" Items="@_myJoin" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<JoinedTables,bool>(FilterFunc1)" >
                        <ToolBarContent>                
                            <MudTextField @bind-Value="mySearchString" Immediate="true" Placeholder="Buscar por correo de empleado" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent> 
                        <ColGroup>
                            <col style="width: 175px;" />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh Style="text-align:justify-all">Nombre empleado</MudTh>
                            <MudTh Style="text-align:justify-all">Email empleado</MudTh>
                            <MudTh Style="text-align:justify-all">Tipo contrato </MudTh>
                            <MudTh Style="text-align:justify-all">Intervalo pago</MudTh>
                            <MudTh Style="text-align:justify-all">Inicio contrato</MudTh>
                            <MudTh Style="text-align:justify-all">Fin contrato</MudTh>
                            <MudTh Style="text-align:justify-all"> Salario</MudTh>
                        </HeaderContent>

                        <RowTemplate>
                            <MudTd DataLabel="Nombre empleado" Style="text-align:justify-all">@context.Name @context.LastName1 @context.LastName2</MudTd>
                            <MudTd DataLabel="Email empleado" Style="text-align:justify-all">@context.EmployeeEmail</MudTd>
                            <MudTd DataLabel="Tipo contrato" Style="text-align:justify-all">@context.ContractType</MudTd>
                            <MudTd DataLabel="Intervalo pago" Style="text-align:justify-all">@context.PaymentInterval</MudTd>
                            <MudTd DataLabel="Inicio contrato" Style="text-align:justify-all">@context.ContractStartDate.ToShortDateString()</MudTd>
                            <MudTd DataLabel="Fin contrato" Style="text-align:justify-all">@context.ContractFinishDate.ToShortDateString()</MudTd>
                            
                            @if (context.ContractType == "Por horas")
                            {
                                <MudTd DataLabel="Salario" Style="text-align:right" >₡@context.MountPerHour.00/H</MudTd>
                            } else
                            {
                                <MudTd DataLabel="Salario" Style="text-align:right" >₡@context.MountPerHour.00</MudTd>
                            }
                             <MudTd DataLabel="Terminar">
                                <MudSpacer></MudSpacer>
                                    <MudButton Variant="Variant.Filled" @onclick="@(e => GoToFireTheEmployee(@context.EmployeeEmail))" Color="Color.Transparent">
                                    <MudText>
                                    Terminar
                                    </MudText> 
                                </MudButton>
                            </MudTd>
                            </RowTemplate>
                        <PagerContent>
                            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Primary" Class="pa-4"/>
                        </PagerContent>
            </MudTable>
        } else 
        {
            <MudPaper Class="border-solid border-2 mud-border-primary pa-4" Elevation="0">
                <MudText Typo="Typo.subtitle1">No existen empleados asociados al proyecto ¿Desea contratar a algún empleado? </MudText>
            </MudPaper>    
        }
        <br>
        <MudButton Variant="Variant.Filled" @onclick="GoToCreateAgreement" Color="Color.Primary">
            <MudText>
                Contratar
            </MudText> 
        </MudButton>
        <MudButton> </MudButton>
        <MudButton Variant="Variant.Filled" @onclick="GoToEmployeeList" Color="Color.Transparent">
            <MudText>
                Volver
            </MudText> 
        </MudButton>
    }
}

@code {
    [Parameter]
    public string projectName { get; set; }
    [Parameter]
    public string employerEmail { get; set; }
    private bool _loading = true;
    private bool _empty = true;
    string mySearchString = "";
    private MudTable<JoinedTables> _table;
    private IEnumerable<Project> _projects = new List<Project>();
    private IEnumerable<Agreement> _agreements = new List<Agreement>();
    private IEnumerable<AgreementType> _agreementType = new List<AgreementType>();
    private IEnumerable<Person> _people = new List<Person>();
    private IEnumerable<JoinedTables> _myJoin = new List<JoinedTables>();

    protected override async Task OnInitializedAsync()
    {
        _empty = false;
        _projects = await ProjectService.GetEmployerProyects(employerEmail);
        _agreements = await AgreementService.GetAllAgreementsByProjectAndEmployer(projectName, employerEmail);
        _agreementType = await AgreementTypeService.GetAllAgreementTypes();
        _people = await EmployeeService.GetProjectEmployees(projectName);
        populateJoinAttribute();
        checkJoinLenght();
        _loading = false;
    }

    private void populateJoinAttribute() 
    { 
        _myJoin = from P in _projects
                  join A in _agreements on P.ProjectName equals A.ProjectName
                  join Pe in _people on A.EmployeeEmail equals Pe.Email
                  join ATP in _agreementType on A.ContractType equals ATP.TypeAgreement
                  select new JoinedTables
                    {
                        PaymentInterval = P.PaymentInterval,
                        EmployeeEmail = A.EmployeeEmail,
                        ContractType = A.ContractType,
                        ContractStartDate = (DateTime) A.ContractStartDate,
                        ContractFinishDate = (DateTime) A.ContractFinishDate,
                        MountPerHour = ATP.MountPerHour,
                        Name = Pe.Name,
                        LastName1 = Pe.LastName1,
                        LastName2 =  Pe.LastName2
                    };
    }

    private void checkJoinLenght()
    {
        if (_myJoin.Length() == 0)
        {
            _empty = true;
        }
    }
    private void GoToFireTheEmployee(string email)
    {
       nav.NavigateTo($"/Agreements/{email}");
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(JoinedTables element) => FilterFunc(element, mySearchString);

    private bool FilterFunc(JoinedTables element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.EmployeeEmail.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private void GoToCreateAgreement()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Agreements/New");
    }

    private void GoToEmployeeList()
    {
        nav.NavigateTo($"/View_Project_Employees/{employerEmail}/{projectName}");
    }

}
