@page "/Projects/{employerEmail}/{projectName}/Agreements/See"

@using Domain.Projects.DTOs
@using Domain.Projects.Entities
@using Application.Projects
@using Presentation.Projects.Models
@using Presentation.Core.Components
@using System.ComponentModel.DataAnnotations




@using System.Globalization

@using Domain.Agreements.DTOs
@using Application.Agreements
@using Domain.Agreements.Entities
@using Application.People
@using Domain.People.Entities
@using Domain.Employees.Entities
@using Application.Employees
@using Application.Employers
@using Domain.Employers.Entities
@using Domain.Employers.DTOs
@using Application.AgreementTypes
@using Domain.AgreementTypes.Entities
@using Domain.AgreementTypes.DTOs



@inject IProjectService ProjectService
@inject ISnackbar Snackbar
@inject NavigationManager nav


@inject IAgreementService AgreementService
@inject IAgreementTypeService AgreementTypeService
@inject IPersonService PersonService
@inject IEmployeeService EmployeeService
@inject IEmployerService EmployerService


@*From here *@



@if(_loading) 
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}
else
{
    @if (!_loading)
    {
        List <BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Inicio", href: ""),
            new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        };
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudPaper Height="60px" Width="100%" Outlined="false" Class="border-none" Elevation="0"> 
        </MudPaper>

        if(!empty)
        {
                <MudTable @ref="@_table" Items="@_myJoin" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Filter="new Func<JoinedTables,bool>(FilterFunc1)">
                        <HeaderContent>
                            <MudTh>Email del empleado</MudTh>
                            <MudTh>Email del empleador</MudTh>
                            <MudTh>Nombre proyecto</MudTh>
                            <MudTh>Tipo de contrato </MudTh>
                            <MudTh>Intervalo de pago</MudTh>
                            <MudTh>Fecha de inicio de contrato</MudTh>
                            <MudTh>Fecha de finalización de contrato</MudTh>
                            <MudTh>Salario por hora</MudTh>
                        </HeaderContent>

                        <RowTemplate>
                            <MudTd DataLabel="Email del empleado">@context.EmployeeEmail</MudTd>
                            <MudTd DataLabel="Email del empleador">@context.EmployerEmail</MudTd>
                            <MudTd DataLabel="Nombre proyecto">@context.ProjectName</MudTd>
                            <MudTd DataLabel="Tipo de contrato">@context.ContractType</MudTd>
                            <MudTd DataLabel="Intervalo de pago">@context.PaymentInterval</MudTd>
                            <MudTd DataLabel="Fecha de inicio de contrato">@context.ContractStartDate</MudTd>
                            <MudTd DataLabel="Fecha de finalización de contrato">@context.ContractFinishDate</MudTd>
                            <MudTd DataLabel="Salario por hora">@context.MountPerHour</MudTd>

                             <MudTd DataLabel="Contrato">
                                <MudSpacer></MudSpacer>
                                    <MudButton Variant="Variant.Filled" @onclick="@(e => GoToFireTheEmployee(@context.EmployeeEmail))" Color="Color.Transparent">
                                    <MudText>
                                    Terminar
                                    </MudText> 
                                </MudButton>
                            </MudTd>
                            </RowTemplate>
                        <PagerContent>
                            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
                        </PagerContent>
                    </MudTable>
                     <br>


        }
    }
}

@code {
    private bool _loading = true;
    private bool empty = true;
    string mySearchString = "";
    private IEnumerable<Agreement> _elements = new List<Agreement>();
    private MudTable<JoinedTables> _table;

    @*Check this *@
    public string tab1 { get; set; } = "Contratar empleados";
    public string tab2 { get; set; } = "Empleados contratados";

    [Parameter]
    public string projectName { get; set; }

    [Parameter]
    public string employerEmail { get; set; }

    [Parameter]
    public EventCallback<string> SendTableState { get; set; }

    Agreement myAgreement = new Agreement("", "", "", null, "", 0, null);


    private IEnumerable<Project> _projects = new List<Project>();
    private IEnumerable<Agreement> _agreements = new List<Agreement>();
    private IEnumerable<AgreementType> _agreementType = new List<AgreementType>();


    public class JoinedTables
    {

        public string EmployerEmail {get;set; }
        public string ProjectName {get;set; }
        public string PaymentInterval {get;set; }
        public string EmployeeEmail {get;set; }
        public string ContractType {get;set; }
        public DateTime? ContractStartDate {get;set; }
        public DateTime? ContractFinishDate {get;set; }
        public int MountPerHour {get;set; }
    }

    private IList<JoinedTables> _myJoin = new List<JoinedTables>();

    protected override async Task OnInitializedAsync()
    {
        _projects = await ProjectService.GetEmployerProyects(employerEmail);
        _agreements = await AgreementService.GetAllAgreementsByProjectAndEmployer(projectName, employerEmail);
        _agreementType = await AgreementTypeService.GetAllAgreementTypes();


        var _myJoin2 = from P in _projects
                       join A in _agreements on P.ProjectName equals A.ProjectName
                       join ATP in _agreementType on A.ContractType equals ATP.TypeAgreement
                       select new
                       {
                           EmployerEmail = P.EmployerEmail,
                           ProjectName = P.ProjectName,
                           PaymentInterval = P.PaymentInterval,
                           EmployeeEmail = A.EmployeeEmail,
                           ContractType = A.ContractType,
                           ContractStartDate = A.ContractStartDate,
                           ContractFinishDate = A.ContractFinishDate,
                           MountPerHour = ATP.MountPerHour,
                       };

        _myJoin = _myJoin2.Select(x => new JoinedTables
            {
                EmployerEmail = x.EmployerEmail,
                ProjectName = x.ProjectName,
                PaymentInterval = x.PaymentInterval,
                EmployeeEmail = x.EmployeeEmail,
                ContractType = x.ContractType,
                ContractStartDate = x.ContractStartDate,
                ContractFinishDate = x.ContractFinishDate,
                MountPerHour = x.MountPerHour
            }).ToList();



        if (_myJoin.Length() == 0)
        {
            empty = true;
        }
        else
        {
            empty = false;
        }
        _loading = false;


    }

    private void GoToFireTheEmployee(string email)
    {
       nav.NavigateTo($"/Agreements/{email}");
    }

    private void GoToViewError()
    {
        //nav.NavigateTo($"/View_Project_Employees_Error/{email}/{projectName}");
    }

    private void GoToProjectDetails()
    {
        //nav.NavigateTo($"/Projects/Details/{email}/{projectName}");
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(JoinedTables element) => FilterFunc(element, mySearchString);

    private bool FilterFunc(JoinedTables element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
            // Check next line of code.
        if (element.EmployerEmail.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task SendConmuteSignal()
    {
        await SendTableState.InvokeAsync("");
    }

    private void GoToCreateEmployee()
    {
        //nav.NavigateTo($"/Create_Employee/{email}/{projectName}");
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

}
