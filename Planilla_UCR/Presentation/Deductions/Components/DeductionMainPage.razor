@page "/Deductions"
@using Domain.Subscriptions.DTOs
@using Domain.Subscriptions.Entities
@using Application.Subscriptions
@using Presentation.Core.Components
@inject NavigationManager nav
@inject ISubscriptionService SubscriptionService

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

@if (_empty)
{
    <MudText Typo="Typo.h6" Align="Align.Center">No hay deducciones asociadas al proyecto
    </MudText>
    <br>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton></MudButton>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">
            <MudText> 
            Crear Deducción
            </MudText> 
        </MudButton>
        <MudSpacer></MudSpacer>
        <MudButton></MudButton>
    </MudToolBar>
}
else
{
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudSpacer></MudSpacer>
         <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" OnClick="GoToConfigs"/>
    </MudToolBar>
    <MudTable @ref="mudTable" Items="@Elements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm"  Loading="@_empty" Filter="new Func<SubscriptionDTO,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Align="Align.Center" Typo="Typo.h6">Lista de deducciones</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nombre</MudTh>
            <MudTh>Descripción</MudTh>
            <MudTh>Costo</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombre">
                <MudLink Color="Color.Secondary" Href="@($"/Deductions/Details/{context.EmployerEmail}/{context.NameSubscription}")">
                    @context.NameSubscription
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Descripción">@context.SubscriptionDescription</MudTd>
            <MudTd DataLabel="Costo">@context.Cost</MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTFootRow Class="bold-text">
                <MudTd>
                     <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">Crear Deducciones</MudButton>
                </MudTd>
            </MudTFootRow>
        </FooterContent>
        <PagerContent>
                <MudPagination SelectedChanged="PageChanged" Count="@((mudTable.GetFilteredItemsCount() + mudTable.RowsPerPage - 1) / mudTable.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
        </PagerContent>
    </MudTable>
}


@code {
    private bool _hidePosition;
    private bool _empty = true;
    private int selectedRowNumber = -1;
    private MudTable<SubscriptionDTO> mudTable;
    private List<string> clickedEvents = new();
    private IEnumerable<SubscriptionDTO> Elements;
    
    public string searchString1 = "";
    public string project { get; set; }


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: ""),
        new BreadcrumbItem("Proyectos", href: null, disabled: true),
        new BreadcrumbItem("Nombre", href: null, disabled: true),
        new BreadcrumbItem("Deducciones", href: "deductions"),
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await SubscriptionService.GetAllSubscriptionsAsync();
        if (Elements.Length() > 0){
            _empty = false;
        }
    }

    private void GoToCreate()
    {
        nav.NavigateTo("/Deductions/New");
    }

    private void GoToConfigs()
    {
        nav.NavigateTo("/Deductions/Configurations");
    }

    private void PageChanged(int i)
    {
        mudTable.NavigateTo(i - 1);
    }

    private bool FilterFunc1(SubscriptionDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SubscriptionDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.NameSubscription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}