@page "/Projects/{employerEmail}/{projectName}/Deductions/{SubscriptionName}"

@using Domain.Subscriptions.DTOs
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Presentation.Core.Components
@inject NavigationManager nav
@inject ISubscriptionService SubscriptionService

@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem("Deducciones", href: $"/Projects/{employerEmail}/{projectName}/Deductions"),
    };
}
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

@if (_loading)
{
    <h4 class="text-danger">Deduction not found</h4>
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>    
                <MudText Typo="Typo.h6" Align="Align.Center">@subscription.SubscriptionName</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" OnClick="GoToConfigs"/>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText>Organización:</MudText>
             <MudText Typo="Typo.body2">@subscription.ProviderName</MudText>
            <MudText>Costo: </MudText>
            <MudText Typo="Typo.body2">@subscription.Cost</MudText>
            <MudText>Descripción: </MudText>
            <MudText Typo="Typo.body2">@subscription.SubscriptionDescription</MudText>
        </MudCardContent>
        <MudToolBar DisableGutters="true" Class="gap-4">
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" OnClick="GoToMain" Color="Color.Secondary">Volver</MudButton>
            <MudSpacer></MudSpacer>
        </MudToolBar>
    </MudCard>
}


@code {
    private bool _hidePosition;
    private bool _loading = true;
    private IEnumerable<Subscription> Elements;
    public Subscription subscription = new Subscription("","","","","",0,0,1);

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }
    [Parameter] public string SubscriptionName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        subscription = await SubscriptionService.GetSubscription(employerEmail, projectName, SubscriptionName);
        if (subscription != null)
        {
            _loading = false;
        }
    }

    private void GoToConfigs()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions/{SubscriptionName}/Configurations");
    }

    private void GoToMain()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions");
    }
}