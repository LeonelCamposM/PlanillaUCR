@page "/Projects/{employerEmail}/{projectName}/Deductions"
@using Domain.Subscriptions.Entities
@using Application.Subscriptions
@using Presentation.Core.Components
@using Presentation.Authentication
@inject NavigationManager nav
@inject ISubscriptionService SubscriptionService

@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Home", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem("Deducciones", href: $"/Projects/{employerEmail}/{projectName}/Deductions"),
    };
}

<Authenticator email="@employerEmail" SendAuthenticationState="ReceiveAuthenticationState"> </Authenticator>
@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}
else
{
    if (authenticationState == true && _loading == false)
    {
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
            @if (_empty)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">No hay deducciones asociadas al proyecto
                </MudText>
                <br>
                <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudButton></MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">
                        <MudText> 
                        Crear Deducción
                        </MudText> 
                    </MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton></MudButton>
                </MudToolBar>
            }
            else
            {
                <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudSpacer></MudSpacer>
                     <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" OnClick="GoToConfigs"/>
                </MudToolBar>
                <MudTable @ref="mudTable" Items="@elements" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm"  Loading="@_empty" Filter="new Func<Subscription,bool>(FilterFunc1)">
                    <ToolBarContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Lista de deducciones</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Descripción</MudTh>
                        <MudTh>Costo</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre">
                            <MudLink Color="Color.Secondary" Href="@($"/Projects/{employerEmail}/{projectName}/Deductions/{context.SubscriptionName}")">
                                @context.SubscriptionName
                            </MudLink>
                        </MudTd>
                        <MudTd DataLabel="Descripción">@context.SubscriptionDescription</MudTd>
                        <MudTd DataLabel="Costo">@context.Cost</MudTd>
                    </RowTemplate>
                    <FooterContent>
                        <MudTFootRow Class="bold-text">
                            <MudTd>
                                 <MudButton Variant="Variant.Filled" OnClick="GoToCreate" Color="Color.Secondary">Crear Deducciones</MudButton>
                            </MudTd>
                        </MudTFootRow>
                    </FooterContent>
                    <PagerContent>
                            <MudPagination SelectedChanged="PageChanged" Count="@((mudTable.GetFilteredItemsCount() + mudTable.RowsPerPage - 1) / mudTable.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
                    </PagerContent>
                </MudTable>
}
    }
    else
    {
        //Unauthorized
        nav.NavigateTo("/Visitor");
    }
}

@code {
    private bool _hidePosition;
    private bool _empty = true;
    private int selectedRowNumber = -1;
    private MudTable<Subscription> mudTable;
    private List<string> clickedEvents = new();
    private IEnumerable<Subscription> elements;
    bool _loading = true;
    bool authenticationState = false;
    private int currentCount = 0;

    [CascadingParameter]
    protected EventCallback<string> setEmail { get; set; }

    public string searchString1 = "";

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }

    public async Task ReceiveAuthenticationState(bool state)
    {
        authenticationState = state;
        _loading = false;
        await setEmail.InvokeAsync(employerEmail);
    }

    protected override async Task OnInitializedAsync()
    {
        elements = await SubscriptionService.GetDeductionsByProject(employerEmail, projectName);
        if (elements.Length() > 0){
            _empty = false;
        }
    }

    private void GoToCreate()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions/New");
    }

    private void GoToConfigs()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions/Configurations");
    }

    private void PageChanged(int i)
    {
        mudTable.NavigateTo(i - 1);
    }

    private bool FilterFunc1(Subscription element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Subscription element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SubscriptionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}