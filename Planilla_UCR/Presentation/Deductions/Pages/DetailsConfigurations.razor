@page "/Projects/{employerEmail}/{projectName}/Deductions/{SubscriptionName}/Configurations"
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Presentation.Core.Components
@using Presentation.Deductions.Models
@using System.Globalization
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject ISubscriptionService SubscriptionService

@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: ""),
        new BreadcrumbItem("Proyectos", href: null, disabled: true),
        new BreadcrumbItem("Deducciones", href: $"/Projects/{employerEmail}/{projectName}/Deductions"),
    };
}
<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

@if (_loading)
{
    <h4 class="text-danger">Deduction not found</h4>
}
else
{
    <MudGrid>
        @*Text fields *@
        <MudItem xs="12" sm="12">
            <MudPaper  Height="250px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                <MudText Align="Align.Center" Typo="Typo.h6">Modificar deducción</MudText>
                <MudForm @ref="form">
                <MudGrid>

                <MudItem xs="2">
                </MudItem>
                <MudItem xs="8">
                    <MudTextField @bind-Value="subscription.SubscriptionName" Label="Nombre" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                </MudItem>

                <MudItem xs="2"></MudItem>

                <MudItem xs="4">
                    <MudNumericField Immediate="false" Label="Costo" Format="N2" Culture="@cultureCR" Variant="Variant.Outlined" @bind-Value="tempCost" 
                    Adornment="Adornment.Start" AdornmentText="@cultureCR.NumberFormat.CurrencySymbol"/>
                </MudItem>

                <MudItem xs="4">
                    <MudTextField @bind-Value="subscription.ProviderName"  Label="Organización" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="2"></MudItem>  

                <MudItem xs="2"></MudItem>  

                <MudItem xs="8">
                    <MudTextField @bind-Value="subscription.SubscriptionDescription" Label="Descripcion" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="2"></MudItem>  
                <MudItem xs="2"></MudItem>  

                <MudItem xs="12" sm="6" md="4">
                    <MudItem xs="2"></MudItem>  
                    <MudButton Disabled="@snackHandler._saving" OnClick="SaveDeduction" Variant="Variant.Filled" Color="Color.Secondary">
                        @if (snackHandler._saving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Guardando</MudText>
                        }
                        else
                        {
                            <MudText>Actualizar</MudText>
                        }
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                            <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                                    <MudText>Limpiar</MudText>
                            </MudButton>
                </MudItem>

                </MudGrid>
            </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {
    private bool _hidePosition;
    private bool _loading = true;
    private double tempCost = 0.0;
    public Subscription subscription = new Subscription("","","","CCSS","Deducción1",2000,0,1);
    MudForm form;
    SnackHandler snackHandler = new SnackHandler();
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");


    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }
    [Parameter] public string SubscriptionName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        subscription = await SubscriptionService.GetSubscription(employerEmail, projectName, SubscriptionName);
        if (subscription != null)
        {
            tempCost = Convert.ToDouble(subscription.Cost);
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("es-CR");
            _loading = false;
        }
    }

    async Task SaveDeduction()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid)
        {
            subscription.Cost = Convert.ToInt32(tempCost);
            snackHandler._saving = false;
            ShowSnackNotification("Deducción "+subscription.SubscriptionName+" modificada", Severity.Success);
        }
       
        snackHandler._saving = false;
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }


    void CleanForm()
    {
        subscription.SubscriptionDescription = "";
        subscription.ProviderName= "";
        subscription.Cost = 0;
    }


    private void GoToMain()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions");
    }
}