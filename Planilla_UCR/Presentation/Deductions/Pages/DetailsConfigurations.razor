@page "/Projects/{employerEmail}/{projectName}/Deductions/{subscriptionName}"
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Presentation.Core.Components
@using Presentation.Deductions.Components
@using System.Globalization
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject ISubscriptionService SubscriptionService

@{List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: ""),
        new BreadcrumbItem("Proyectos", href: $"/Projects/{employerEmail}"),
        new BreadcrumbItem($"{projectName}", href: $"/Projects/Details/{employerEmail}/{projectName}"),
        new BreadcrumbItem("Deducciones voluntarias", href: $"/Projects/{employerEmail}/{projectName}/Deductions"),
        new BreadcrumbItem($"{subscriptionName}", href: $"/Projects/{employerEmail}/{projectName}/Deductions/{subscriptionName}")
    };
}


@if (_loading)
{
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
         <MudText Align="Align.Center" Typo="Typo.h6">
              <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
         </MudText>
    </MudPaper>
}
else
{
    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudSpacer></MudSpacer>
        @if(_disabled)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" OnClick="EnableForm"/>
        }else
        {
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" OnClick="DisableForm"/>
        }
        
    </MudToolBar>
    <MudGrid>
        @*Text fields *@
        <MudItem xs="12" sm="12">
            <MudPaper  Height="250px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
                @if (_disabled)
                {
                    <MudText Align="Align.Center" Typo="Typo.h6">Detalles de la deducción voluntaria</MudText>
                }else
                {
                    <MudText Align="Align.Center" Typo="Typo.h6">Modificar deducción voluntaria</MudText>
                }
                <MudForm @ref="form">
                <MudGrid>

                <MudItem xs="2">
                </MudItem>
                <MudItem xs="8">
                    <MudTextField @bind-Value="newName" MaxLength="255" Label="Nombre" Variant="Variant.Outlined" ReadOnly = "@_disabled" Required="true" RequiredError="Campo requerido"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                </MudItem>

                <MudItem xs="2"></MudItem>

                <MudItem xs="4">
                    <MudNumericField Immediate="true" Label="Costo" Format="N2" Culture="@cultureCR" Variant="Variant.Outlined" @bind-Value="tempCost" 
                    Adornment="Adornment.Start" AdornmentText="@cultureCR.NumberFormat.CurrencySymbol" ReadOnly = "@_disabled" Required="true" RequiredError="Campo requerido"/>
                </MudItem>

                <MudItem xs="4">
                    <MudTextField @bind-Value="providerName"  MaxLength="255" Label="Organización" Variant="Variant.Outlined" ReadOnly = "@_disabled" Required="true" RequiredError="Campo requerido"></MudTextField>
                </MudItem>

                <MudItem xs="2"></MudItem>  

                <MudItem xs="2"></MudItem>  

                <MudItem xs="8">
                    <MudTextField @bind-Value="sDescription" MaxLength="600" Label="Descripcion" Lines="6" Variant="Variant.Outlined" ReadOnly = "@_disabled" Required="true" RequiredError="Campo requerido"></MudTextField>
                </MudItem>

                <MudItem xs="2"></MudItem>  
                <MudItem xs="2"></MudItem>  

                @if(_disabled == false)
                {
                 <MudItem xs="8" >
                    <MudButton Disabled="@snackHandler._saving" OnClick="SaveDeduction" Variant="Variant.Filled" Color="Color.Secondary">
                        @if (snackHandler._saving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Modificando</MudText>
                        }
                        else
                        {
                            <MudText>Actualizar</MudText>
                        }
                    </MudButton>
                    <MudButton Disabled="true"> </MudButton>
                    @*Clear buton *@
                    <MudButton OnClick="CleanForm" Variant="Variant.Filled" Color="Color.Transparent">
                            <MudText>Cancelar</MudText>
                    </MudButton>
                </MudItem>
                }
                </MudGrid>
            </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    private bool _loading = true;
    private bool _disabled = true;
    private string newName = "";
    private double? tempCost;
    private string providerName = "";
    private string sDescription = "";
    public Subscription subscription = new Subscription("", "", "", "", "", 0.0, 0, 1);
    MudForm form;
    SnackHandler snackHandler = new SnackHandler();
    public CultureInfo cultureCR = CultureInfo.GetCultureInfo("es-CR");

    [Parameter] public string employerEmail { get; set; }
    [Parameter] public string projectName { get; set; }
    [Parameter] public string subscriptionName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        subscription = await SubscriptionService.GetSubscription(employerEmail, projectName, subscriptionName);
        newName = subscription.SubscriptionName;
        tempCost = subscription.Cost;
        providerName =subscription.ProviderName;
        sDescription = subscription.SubscriptionDescription;
        if (subscription != null)
        {
            _loading = false;
        }
    }

    async Task SaveDeduction()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid)
        {
            snackHandler._saving = false;
            subscription.Cost = (double)tempCost;
            subscription.ProviderName = providerName;
            subscription.SubscriptionDescription = sDescription;
            bool isModified = await SubscriptionService.ModifySubscription(subscription, newName);
            if (isModified)
            {
                ShowSnackNotification("Deducción " + subscription.SubscriptionName + " modificada", Severity.Success);
                subscription = await SubscriptionService.GetSubscription(employerEmail, projectName, newName);
                subscriptionName = newName;
                DisableForm();
            }
            else
            {
                ShowSnackNotification("El nombre de la deducción " + newName + " ya está en uso", Severity.Error);
                newName = subscription.SubscriptionName;
            }
        }

        snackHandler._saving = false;
    }

    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }

    void CleanForm()
    {
        subscription.SubscriptionDescription = "";
        subscription.ProviderName= "";
        subscription.Cost = 0.0;
    }

    private void GoToMain()
    {
        nav.NavigateTo($"/Projects/{employerEmail}/{projectName}/Deductions");
    }

    private void EnableForm()
    {
        _disabled = false;
        newName = subscription.SubscriptionName;
        tempCost = subscription.Cost;
        providerName = subscription.ProviderName;
        sDescription = subscription.SubscriptionDescription;
    }

    private void DisableForm()
    {
        _disabled = true;
        newName = subscription.SubscriptionName;
        tempCost = subscription.Cost;
        providerName = subscription.ProviderName;
        sDescription = subscription.SubscriptionDescription;
    }
}