@page "/Deductions/Configurations"
@using Application.Subscriptions
@using Domain.Subscriptions.Entities
@using Presentation.Core.Components
@inject ISnackbar Snackbar
@inject ISubscriptionService SubscriptionService

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
@if (_loading)
{
    <MudText Typo="Typo.h6">No hay deducciones asociadas al proyecto</MudText>
}
else
{
    <MudTable @ref="mudTable" Items="@Elements" RowsPerPage="6" MultiSelection="true" @bind-SelectedItems="selectedItems1" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" Filter="new Func<Subscription,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Align="Align.Center" Typo="Typo.h6">Lista de deducciones</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nombre</MudTh>
            <MudTh>Descripción</MudTh>
            <MudTh>Costo</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombre">
                <MudLink Color="Color.Secondary" Href="@($"/Deductions/Details/{@context.EmployerEmail}/{@context.ProjectName}/{@context.SubscriptionName}/Configurations")">
                    @context.SubscriptionName
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Descripción">@context.SubscriptionDescription</MudTd>
            <MudTd DataLabel="Costo">@context.Cost</MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd colspan="5">Select All</MudTd>
        </FooterContent>
        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@((mudTable.GetFilteredItemsCount() + mudTable.RowsPerPage - 1) / mudTable.RowsPerPage)" Color="Color.Secondary" Class="pa-4"/>
        </PagerContent>
    </MudTable>
    <MudText Inline="true">Selected items: @(selectedItems1==null ? "" : string.Join(", ", selectedItems1.OrderBy(x=>x.SubscriptionName).Select(x=>x.SubscriptionName)))</MudText>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" OnClick="DeleteDeductions" Color="Color.Error">Borrar</MudButton>
    </MudToolBar>
}


@code {
    private bool _hidePosition;
    private bool _loading = true;
    private HashSet<Subscription> selectedItems1 = new HashSet<Subscription>();
    private IEnumerable<Subscription> Elements;
    private MudTable<Subscription> mudTable;

    public string searchString1 = "";
    public string project { get; set; }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: ""),
        new BreadcrumbItem("Proyectos", href: null, disabled: true),
        new BreadcrumbItem("Deducciones", href: "deductions"),
        new BreadcrumbItem("Configuraciones", href: "configdeductions"),
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await SubscriptionService.GetAllDeductionsAsync();
        if (Elements.Length() > 0){
            _loading = false;
        }
    }

    private void DeleteDeductions()
    {
        string message = "¿Desea borrar las deduciones seleccionadas?";
        Snackbar.Add(message, Severity.Warning, config =>
        {
            config.Action = "Confirmar";
            config.RequireInteraction = true;
            config.ShowCloseIcon = false;
            config.Onclick = snackbar =>
            {
                DeleteDeductionsUpdate();
                return Task.CompletedTask;
            };
        });
    }

    private bool FilterFunc1(Subscription element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Subscription element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SubscriptionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void DeleteDeductionsUpdate()
    {
        Snackbar.Add("Deducciones borradas", Severity.Success);
        StateHasChanged();
    }

    private void PageChanged(int i)
    {
        mudTable.NavigateTo(i - 1);
    }
}