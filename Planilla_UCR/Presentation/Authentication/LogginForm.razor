@page "/Loggin"
@using Presentation.Core.Components
@using Application.People
@using Domain.People.Entities
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Shared.Models
@using Application.Authentication
@using Domain.Authentication.DTOs
@using Application.ContextMenu

@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IPersonService PersonService
@inject IAuthenticationService AuthenticationService
@inject IContextMenuService ContexService

@{
    List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "#"),
        new BreadcrumbItem("Ingresar", href: "Loggin"),
    };
}

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudGrid>
    <MudItem xs="10" sm="12">
    <MudPaper  Height="220px" Width="100%" Outlined="false" Class="border-none pa-4" Elevation="0">
        <MudSpacer></MudSpacer>
        <MudText Align="Align.Center" Typo="Typo.h6">Ingresar</MudText>
        <MudForm @ref="form">
        <MudGrid>
            <MudItem xs="3"></MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="accountData.Email" Label="Correo electrónico" Required="true" RequiredError="Campo requerido" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="3"></MudItem>
            <MudItem xs="3"></MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="accountData.Password" Label="Contraseña" Required="true" RequiredError="Campo requerido" InputType="InputType.Password" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="3"></MudItem>
             <MudItem xs="3"></MudItem>
            @*Create buton *@
                <MudItem xs="6">
                <MudButton Disabled="@snackHandler._saving" OnClick="ValidateRegisterAccount" Variant="Variant.Filled" Color="Color.Primary">
                        <MudText>Ingresar</MudText>
                </MudButton> 
                <MudButton Disabled ="true"></MudButton>
                <MudButton OnClick="GoToCreateAccount" Variant="Variant.Filled" Color="Color.Transparent">
                    <MudText>Registrar cuenta empleador</MudText>
                </MudButton>
            </MudItem>
           <MudItem xs="3"></MudItem>
           <MudItem xs="3"></MudItem>
        </MudGrid>
        </MudForm>

    </MudPaper>
    </MudItem>
    <MudItem xs="3">
    </MudItem>
</MudGrid>

@code{
    MudForm form;
    AccountDTO accountData = new AccountDTO("","");
    SnackHandler snackHandler = new SnackHandler();

    async Task ValidateRegisterAccount()
    {
        snackHandler._saving = true;
        await form.Validate();
        if (form.IsValid){
            bool emailExist = await AuthenticationService.EmailIsAlreadyRegistered(accountData.Email);
            if (emailExist)
            {
                bool validPassword = await AuthenticationService.SignInRequestAsync(accountData, true);
                if (!validPassword)
                {
                    ShowSnackNotification("Contraseña incorrecta", Severity.Error);
                }
            }
            else
            {
                ShowSnackNotification("No posee una cuenta registrada", Severity.Error);
            } 
        }
        snackHandler._saving = false;
    }

    private void GoToCreateAccount()
    {
        nav.NavigateTo("/Register_Form");
    }


    void ShowSnackNotification(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.NewestOnTop = true;
        Snackbar.Add($"{message}", severity, config =>
        {
            config.RequireInteraction = false;
            config.ShowCloseIcon = true;
            config.Onclick = snackbar =>
            {
                return Task.CompletedTask;
            };
        });
    }
}